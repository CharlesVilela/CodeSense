{
  "metadata": {
    "title": "React Reference Overview",
    "url": "https://react.dev/reference/react",
    "technology": "react",
    "category": "frameworks",
    "english_level": "B1",
    "professional_context": "deployment",
    "content_type": "technical_documentation",
    "last_updated": "1761765741.0348475"
  },
  "content": "API Reference\nReact Reference Overview\nThis section provides detailed reference documentation for working with React. For an introduction to React, please visit the\nThe React reference documentation is broken down into functional subsections:\nProgrammatic React features:\n- Use different React features from your components.\n- Built-in components that you can use in your JSX.\n- APIs that are useful for defining components.\n- Provide instructions to bundlers compatible with React Server Components.\nReact-dom contains features that are only supported for web applications (which run in the browser DOM environment). This section is broken into the following:\n- Hooks for web applications which run in the browser DOM environment.\n- React supports all of the browser built-in HTML and SVG components.\npackage contains methods supported only in web applications.\nClient APIs\nreact-dom/client\nAPIs let you render React components on the client (in the browser).\nServer APIs\nreact-dom/server\nAPIs let you render React components to HTML on the server.\nReact Compiler\nThe React Compiler is a build-time optimization tool that automatically memoizes your React components and values:\nConfiguration\n- Configuration options for React Compiler.\n- Function-level directives to control compilation.\nCompiling Libraries\n- Guide for shipping pre-compiled library code.\nESLint Plugin React Hooks\nESLint plugin for React Hooks\nhelps enforce the Rules of React:\n- Detailed documentation for each lint with examples.\nRules of React\nReact has idioms — or rules — for how to express patterns in a way that is easy to understand and yields high-quality applications:\nComponents and Hooks must be pure\n– Purity makes your code easier to understand, debug, and allows React to automatically optimize your components and hooks correctly.\nReact calls Components and Hooks\n– React is responsible for rendering components and hooks when necessary to optimize the user experience.\nRules of Hooks\n– Hooks are defined using JavaScript functions, but they represent a special type of reusable UI logic with restrictions on where they can be called.\nLegacy APIs\nLegacy APIs\n- Exported from the\npackage, but not recommended for use in newly written code.",
  "word_count": 340,
  "key_terms": [
    "api",
    "configuration"
  ]
}