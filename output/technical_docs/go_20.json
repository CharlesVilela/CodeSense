{
  "metadata": {
    "title": "Documentation",
    "url": "https://go.dev/doc",
    "technology": "go",
    "category": "programming_languages",
    "english_level": "B1",
    "professional_context": "development",
    "content_type": "technical_documentation",
    "last_updated": "1761765725.4103231"
  },
  "content": "Documentation\nThe Go programming language is an open source project to make programmers more\nproductive.\nGo is expressive, concise, clean, and efficient. Its concurrency\nmechanisms make it easy to write programs that get the most out of multicore\nand networked machines, while its novel type system enables flexible and\nmodular program construction. Go compiles quickly to machine code yet has the\nconvenience of garbage collection and the power of run-time reflection. It's a\nfast, statically typed, compiled language that feels like a dynamically typed,\ninterpreted language.\nGetting Started\nInstalling Go\nInstructions for downloading and installing Go.\nTutorial: Getting started\nA brief Hello, World tutorial to get started. Learn a bit about Go code, tools, packages, and modules.\nTutorial: Create a module\nA tutorial of short topics introducing functions, error handling, arrays, maps, unit testing, and compiling.\nTutorial: Getting started with multi-module workspaces\nIntroduces the basics of creating and using multi-module workspaces in Go. Multi-module workspaces are useful for making changes across multiple modules.\nTutorial: Developing a RESTful API with Go and Gin\nIntroduces the basics of writing a RESTful web service API with Go and the Gin Web Framework.\nTutorial: Getting started with generics\nWith generics, you can declare and use functions or types that are written to work with any of a set of types provided by calling code.\nTutorial: Getting started with fuzzing\nFuzzing can generate inputs to your tests that can catch edge cases and security issues that you may have missed.\nWriting Web Applications\nBuilding a simple web application.\nHow to write Go code\nThis doc explains how to develop a simple set of Go packages inside a module,\nand it shows how to use the\nto build and test packages.\nA Tour of Go\nAn interactive introduction to Go in four sections.\nThe first section covers basic syntax and data structures; the second discusses\nmethods and interfaces; the third is about Generics; and the fourth introduces Go's concurrency primitives.\nEach section concludes with a few exercises so you can practice what you've\nlearned. You can\ntake the tour online\nor install it locally with:\n$ go install golang.org/x/website/tour@latest\nThis will place the\nbinary in your\nUsing and understanding Go\nEffective Go\nA document that gives tips for writing clear, idiomatic Go code.\nA must read for any new Go programmer. It augments the tour and\nthe language specification, both of which should be read first.\nFrequently Asked Questions (FAQ)\nAnswers to common questions about Go.\nEditor plugins and IDEs\nA document that summarizes commonly used editor plugins and IDEs with\nGo support.\nDiagnostics\nSummarizes tools and methodologies to diagnose problems in Go programs.\nA Guide to the Go Garbage Collector\nA document that describes how Go manages memory, and how to make the most of it.\nManaging dependencies\nWhen your code uses external packages, those packages (distributed as modules) become dependencies.\nMain documentation page for Go fuzzing.\nCoverage for Go applications\nMain documentation page for coverage testing of Go applications.\nProfile-guided optimization\nMain documentation page for profile-guided optimization (PGO) of Go applications.\nPackage Documentation\nThe documentation for the Go standard library.\nCommand Documentation\nThe documentation for the Go tools.\nLanguage Specification\nThe official Go Language specification.\nGo Modules Reference\nA detailed reference manual for Go's dependency management system.\ngo.mod file reference\nReference for the directives included in a go.mod file.\nThe Go Memory Model\nA document that specifies the conditions under which reads of a variable in\none goroutine can be guaranteed to observe values produced by writes to the\nsame variable in a different goroutine.\nContribution Guide\nContributing to Go.\nRelease History\nA summary of the changes between Go releases.\nAccessing databases\nTutorial: Accessing a relational database\nIntroduces the basics of accessing a relational database using Go and the\ndatabase/sql\npackage in the standard library.\nAccessing relational databases\nAn overview of Go's data access features.\nOpening a database handle\nYou use the Go database handle to execute database operations. Once you open a\nhandle with database connection properties, the handle represents a connection\npool it manages on your behalf.\nExecuting SQL statements that don't return data\nFor SQL operations that might change the database, including SQL\nQuerying for data\nstatements that return data from a query, using the\nUsing prepared statements\nDefining a prepared statement for repeated use can help your code run a bit\nfaster by avoiding the overhead of re-creating the statement each time your\ncode performs the database operation.\nExecuting transactions\nexports methods representing transaction-specific semantics,\n, as well as methods you\nuse to perform common database operations.\nCanceling in-progress database operations\ncontext.Context\nhave your application's function calls and services stop working early and\nreturn an error when their processing is no longer needed.\nManaging connections\nFor some advanced programs, you might need to tune connection pool parameters\nor work with connections explicitly.\nAvoiding SQL injection risk\nYou can avoid an SQL injection risk by providing SQL parameter values as\npackage function arguments\nDeveloping modules\nDeveloping and publishing modules\nYou can collect related packages into modules, then publish the modules for other developers to use. This topic gives an overview of developing and publishing modules.\nModule release and versioning workflow\nWhen you develop modules for use by other developers, you can follow a workflow that helps ensure a reliable, consistent experience for developers using the module. This topic describes the high-level steps in that workflow.\nManaging module source\nWhen you're developing modules to publish for others to use, you can help ensure that your modules are easier for other developers to use by following the repository conventions described in this topic.\nOrganizing a Go module\nWhat is the right way to organize the files and directories in a typical Go project? This topic discusses some common layouts depending on the kind of module you have.\nDeveloping a major version update\nA major version update can be very disruptive to your module's users because it includes breaking changes and represents a new module. Learn more in this topic.\nPublishing a module\nWhen you want to make a module available for other developers, you publish it so that it's visible to Go tools. Once you've published the module, developers importing its packages will be able to resolve a dependency on the module by running commands such as\nModule version numbering\nA module's developer uses each part of a module's version number to signal the versionâ€™s stability and backward compatibility. For each new release, a module's release version number specifically reflects the nature of the module's changes since the preceding release.\nA Video Tour of Go\nThree things that make Go fast, fun, and productive:\ninterfaces, reflection, and concurrency. Builds a toy web crawler to\ndemonstrate these.\nCode that grows with grace\nOne of Go's key design goals is code adaptability; that it should be easy to take a simple design and build upon it in a clean and natural way. In this talk Andrew Gerrand describes a simple \"chat roulette\" server that matches pairs of incoming TCP connections, and then use Go's concurrency mechanisms, interfaces, and standard library to extend it with a web interface and other features. While the function of the program changes dramatically, Go's flexibility preserves the original design as it grows.\nGo Concurrency Patterns\nConcurrency is the key to designing high performance network services. Go's concurrency primitives (goroutines and channels) provide a simple and efficient means of expressing concurrent execution. In this talk we see how tricky concurrency problems can be solved gracefully with simple Go code.\nAdvanced Go Concurrency Patterns\nThis talk expands on the\nGo Concurrency Patterns\ntalk to dive deeper into Go's concurrency primitives.\nGo Talks site\nfor more Go talks.\nGuided tours of Go programs.\nFirst-Class Functions in Go\nGenerating arbitrary text: a Markov chain algorithm\nShare Memory by Communicating\nJSON-RPC: a tale of interfaces\nGo's Declaration Syntax\nDefer, Panic, and Recover\nGo Concurrency Patterns: Timing out, moving on\nGo Slices: usage and internals\nA GIF decoder: an exercise in Go interfaces\nError Handling and Go\nJSON and Go\n- using the\nGobs of data\n- the design and use of the\nThe Laws of Reflection\n- the fundamentals of the\nThe Go image package\n- the fundamentals of the\nThe Go image/draw package\n- the fundamentals of the\nUsing Go Modules\n- an introduction to using modules in a simple project.\nMigrating to Go Modules\n- converting an existing project to use modules.\nPublishing Go Modules\n- how to make new versions of modules available to others.\nGo Modules: v2 and Beyond\n- creating and publishing major versions 2 and higher.\nKeeping Your Modules Compatible\n- how to keep your modules compatible with prior minor/patch versions.\nAbout the Go command\n- why we wrote it, what it is, what it's not, and how to use it.\nGo Doc Comments\n- writing good program documentation\nDebugging Go Code with GDB\nData Race Detector\n- a manual for the data race detector.\nA Quick Guide to Go's Assembler\n- an introduction to the assembler used by Go.\nC? Go? Cgo!\n- linking against C code with\nProfiling Go Programs\n- tools for measuring your code's CPU and memory usage\nIntroducing the Go Race Detector\n- an introduction to the race detector.\nGopls: The language server for Go\n- getting the most out your editor when working in Go.\n, maintained by the Go community, includes articles about the Go language, tools, and other resources.\npage at the\nfor more Go learning resources.\nNon-English Documentation\nfor localized\ndocumentation.\nOpens in new window.",
  "word_count": 1585,
  "key_terms": [
    "parameter",
    "return",
    "function",
    "variable",
    "database",
    "api",
    "interface"
  ]
}