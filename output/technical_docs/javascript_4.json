{
  "metadata": {
    "title": "Introduction",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Introduction",
    "technology": "javascript",
    "category": "programming_languages",
    "english_level": "B1",
    "professional_context": "development",
    "content_type": "technical_documentation",
    "last_updated": "1761765681.11064"
  },
  "content": "Introduction\nThis chapter introduces JavaScript and discusses some of its fundamental concepts.\nWhat you should already know\nThis guide assumes you have the following basic background:\nA general understanding of the Internet and the World Wide Web (\nGood working knowledge of HyperText Markup Language (\nSome programming experience. If you are new to programming, try one of the tutorials linked on the main page about\nWhere to find JavaScript information\nThe JavaScript documentation on MDN includes the following:\nDynamic scripting with JavaScript\nprovides structured JavaScript guides for beginners and introduces basic concepts of programming and the Internet.\nJavaScript Guide\n(this guide) provides an overview about the JavaScript language and its objects.\nJavaScript Reference\nprovides detailed reference material for JavaScript.\nWhat is JavaScript?\nJavaScript is a cross-platform, object-oriented scripting language used to make webpages interactive (e.g., having complex animations, clickable buttons, popup menus, etc.). There are also more advanced server side versions of JavaScript such as Node.js, which allow you to add more functionality to a website than downloading files (such as realtime collaboration between multiple computers). Inside a host environment (for example, a web browser), JavaScript can be connected to the objects of its environment to provide programmatic control over them.\nJavaScript contains a standard library of objects, such as\n, and a core set of language elements such as operators, control structures, and statements. Core JavaScript can be extended for a variety of purposes by supplementing it with additional objects; for example:\nClient-side JavaScript\nextends the core language by supplying objects to control a browser and its\nDocument Object Model\n(DOM). For example, client-side extensions allow an application to place elements on an HTML form and respond to user events such as mouse clicks, form input, and page navigation.\nServer-side JavaScript\nextends the core language by supplying objects relevant to running JavaScript on a server. For example, server-side extensions allow an application to communicate with a database, provide continuity of information from one invocation to another of the application, or perform file manipulations on a server.\nThis means that in the browser, JavaScript can change the way the webpage (DOM) looks. And, likewise, Node.js JavaScript on the server can respond to custom requests sent by code executed in the browser.\nJavaScript and Java\nJavaScript and Java are similar in some ways but fundamentally different in some others. The JavaScript language resembles Java but does not have Java's static typing and strong type checking. JavaScript follows most Java expression syntax, naming conventions and basic control-flow constructs which was the reason why it was renamed from LiveScript to JavaScript.\nIn contrast to Java's compile-time system of classes built by declarations, JavaScript supports a runtime system based on a small number of data types representing numeric, Boolean, and string values. JavaScript has a prototype-based object model instead of the more common class-based object model. The prototype-based model provides dynamic inheritance; that is, what is inherited can vary for individual objects. JavaScript also supports functions without any special declarative requirements. Functions can be properties of objects, executing as loosely typed methods.\nJavaScript is a very free-form language compared to Java. You do not have to declare all variables, classes, and methods. You do not have to be concerned with whether methods are public, private, or protected, and you do not have to implement interfaces. Variables, parameters, and function return types are not explicitly typed.\nJava is a class-based programming language designed for fast execution and type safety. Type safety means, for instance, that you can't cast a Java integer into an object reference or access private memory by corrupting the Java bytecode. Java's class-based model means that programs consist exclusively of classes and their methods. Java's class inheritance and strong typing generally require tightly coupled object hierarchies. These requirements make Java programming more complex than JavaScript programming.\nIn contrast, JavaScript descends in spirit from a line of smaller, dynamically typed languages such as HyperTalk and dBase. These scripting languages offer programming tools to a much wider audience because of their easier syntax, specialized built-in functionality, and minimal requirements for object creation.\nObject-oriented. No distinction between types of objects. Inheritance is through the prototype mechanism, and properties and methods can be added to any object dynamically.\nClass-based. Objects are divided into classes and instances with all inheritance through the class hierarchy. Classes and instances cannot have properties or methods added dynamically.\nVariable data types are not declared (dynamic typing, loosely typed).\nVariable data types must be declared (static typing, strongly typed).\nCannot automatically write to hard disk.\nCan automatically write to hard disk.\nJavaScript and the ECMAScript specification\nJavaScript is standardized at\nEcma International\n— the European association for standardizing information and communication systems (ECMA was formerly an acronym for the European Computer Manufacturers Association) to deliver a standardized, international programming language based on JavaScript. This standardized version of JavaScript, called ECMAScript, behaves the same way in all applications that support the standard. Companies can use the open standard language to develop their implementation of JavaScript. The ECMAScript standard is documented in the ECMA-262 specification.\nThe ECMA-262 standard is also approved by the\n(International Organization for Standardization) as ISO-16262. You can also find the specification on\nthe Ecma International website\n. The ECMAScript specification does not describe the Document Object Model (DOM), which is standardized by the\nWorld Wide Web Consortium (W3C)\nWHATWG (Web Hypertext Application Technology Working Group)\n. The DOM defines the way in which HTML document objects are exposed to your script. To get a better idea about the different technologies that are used when programming with JavaScript, consult the article\nJavaScript technologies overview\nJavaScript documentation versus the ECMAScript specification\nThe ECMAScript specification is a set of requirements for implementing ECMAScript. It is useful if you want to implement standards-compliant language features in your ECMAScript implementation or engine (such as SpiderMonkey in Firefox, or V8 in Chrome).\nThe ECMAScript document is\nintended to help script programmers. Use the JavaScript documentation for information when writing scripts.\nThe ECMAScript specification uses terminology and syntax that may be unfamiliar to a JavaScript programmer. Although the description of the language may differ in ECMAScript, the language itself remains the same. JavaScript supports all functionality outlined in the ECMAScript specification.\nThe JavaScript documentation describes aspects of the language that are appropriate for a JavaScript programmer.\nGetting started with JavaScript\nTo get started with JavaScript, all you need is a modern web browser. Recent versions of\nMicrosoft Edge\nall support the features discussed in this guide.\nA very useful tool for exploring JavaScript is the JavaScript Console (sometimes called the Web Console, or just the console): this is a tool which enables you to enter JavaScript and run it in the current page.\nThe screenshots here show the\nFirefox Web Console\n, but all modern browsers ship with a console that works in a similar way.\nOpening the console\nThe exact instructions for opening the console vary from one browser to another:\nOpening the console in Firefox\nOpening the console in Chrome\nOpening the console in Microsoft Edge\nEntering and running JavaScript\nThe console appears at the bottom of the browser window. Along the bottom of the console is an input line that you can use to enter JavaScript, and the output appears in the panel above:\nThe console works the exact same way as\n: the last expression entered is returned. For the sake of simplicity, it can be imagined that every time something is entered into the console, it is actually surrounded by\nconsole.log\nconsole.log(eval(\"3 + 5\"));\nMulti-line input in the console\nBy default, if you press\n, depending on your keyboard) after entering a line of code, then the string you typed is executed. To enter multi-line input:\nIf the string you typed was incomplete (for example, you typed\nfunction foo() {\n) then the console will treat\nas a line break, and let you type another line.\nIf you hold down\nwhile pressing\n, then the console will treat this as a line break, and let you type another line.\nIn Firefox only, you can activate\nmulti-line input mode\n, in which you can enter multiple lines in a mini-editor, then run the whole thing when you are ready.\nTo get started with writing JavaScript, open the console, copy the following code, and paste it in at the prompt:\nto watch it unfold in your browser!\nWhat's next\nIn the following pages, this guide introduces you to the JavaScript syntax and language features, so that you will be able to write more complex applications.\nBut for now, remember to always include the\n(function(){\"use strict\";\nbefore your code, and add\nto the end of your code. The\nstrict mode\narticles explain what those do, but for now they can be thought of as doing the following:\nPrevent semantics in JavaScript that trip up beginners.\nPrevent code snippets executed in the console from interacting with one another (e.g., having something created in one console execution being used for a different console execution).\nHelp improve MDN\nLearn how to contribute\nThis page was last modified on\n⁨Jul 19, 2025⁩\nMDN contributors\nView this page on GitHub\nReport a problem with this content",
  "word_count": 1527,
  "key_terms": [
    "return",
    "class",
    "function",
    "implementation",
    "variable",
    "object"
  ]
}