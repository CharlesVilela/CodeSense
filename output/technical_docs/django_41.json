{
  "metadata": {
    "title": "Django documentation¶",
    "url": "https://docs.djangoproject.com/settings/",
    "technology": "django",
    "category": "frameworks",
    "english_level": "B1",
    "professional_context": "development",
    "content_type": "technical_documentation",
    "last_updated": "1761765795.1614096"
  },
  "content": "Django documentation\nEverything you need to know about Django.\nFirst steps\nAre you new to Django or to programming? This is the place to start!\nFrom scratch:\nInstallation\nPart 1: Requests and responses\nPart 2: Models and the admin site\nPart 3: Views and templates\nPart 4: Forms and generic views\nPart 5: Testing\nPart 6: Static files\nPart 7: Customizing the admin site\nPart 8: Adding third-party packages\nAdvanced Tutorials:\nHow to write reusable apps\nWriting your first contribution to Django\nGetting help\nHaving trouble? We’d like to help!\n– it’s got answers to many common questions.\nLooking for specific information? Try the\nModule Index\ndetailed table of contents\nNot found anything? See\nFAQ: Getting Help\nfor information on getting support\nand asking questions to the community.\nReport bugs with Django in our\nticket tracker\nHow the documentation is organized\nDjango has a lot of documentation. A high-level overview of how it’s organized\nwill help you know where to look for certain things:\ntake you by the hand through a series of\nsteps to create a web application. Start here if you’re new to Django or web\napplication development. Also look at the “\nFirst steps\nTopic guides\ndiscuss key topics and concepts at a\nfairly high level and provide useful background information and explanation.\nReference guides\ncontain technical reference for APIs and\nother aspects of Django’s machinery. They describe how it works and how to\nuse it but assume that you have a basic understanding of key concepts.\nHow-to guides\nare recipes. They guide you through the\nsteps involved in addressing key problems and use-cases. They are more\nadvanced than tutorials and assume some knowledge of how Django works.\nThe model layer\nDjango provides an abstraction layer (the “models”) for structuring and\nmanipulating the data of your web application. Learn more about it below:\nIntroduction to models\nField types\nMeta options\nModel class\nMaking queries\nQuerySet method reference\nLookup expressions\nModel instances:\nInstance methods\nAccessing related objects\nMigrations:\nIntroduction to Migrations\nOperations reference\nSchemaEditor\nWriting migrations\nTransactions\nAggregation\nCustom fields\nMultiple databases\nCustom lookups\nQuery Expressions\nConditional Expressions\nDatabase Functions\nSupported databases\nLegacy databases\nProviding initial data\nOptimize database access\nPostgreSQL specific features\nThe view layer\nDjango has the concept of “views” to encapsulate the logic responsible for\nprocessing a user’s request and for returning the response. Find all you need\nto know about views via the links below:\nThe basics:\nView functions\nAsynchronous Support\nBuilt-in Views\nRequest/response objects\nTemplateResponse objects\nFile uploads:\nFile objects\nStorage API\nManaging files\nCustom storage\nClass-based views:\nBuilt-in display views\nBuilt-in editing views\nUsing mixins\nAPI reference\nFlattened index\nGenerating CSV\nGenerating PDF\nMiddleware:\nBuilt-in middleware classes\nThe template layer\nThe template layer provides a designer-friendly syntax for rendering the\ninformation to be presented to the user. Learn how this syntax can be used by\ndesigners and how it can be extended by programmers:\nThe basics:\nFor designers:\nLanguage overview\nBuilt-in tags and filters\nHumanization\nFor programmers:\nTemplate API\nCustom tags and filters\nCustom template backend\nDjango provides a rich framework to facilitate the creation of forms and the\nmanipulation of form data.\nThe basics:\nBuilt-in fields\nBuilt-in widgets\nForms for models\nIntegrating media\nCustomizing validation\nThe development process\nLearn about the various components and tools to help you in the development and\ntesting of Django applications:\nFull list of settings\nApplications:\nExceptions:\ndjango-admin and manage.py:\nAdding custom commands\nIntroduction\nWriting and running tests\nIncluded testing tools\nAdvanced topics\nDeployment:\nWSGI servers\nASGI servers\nDeploying static files\nTracking code errors by email\nDeployment checklist\nFind all you need to know about the automated admin interface, one of Django’s\nmost popular features:\nAdmin actions\nAdmin documentation generator\nSecurity is a topic of paramount importance in the development of web\napplications and Django provides multiple protection tools and mechanisms:\nSecurity overview\nDisclosed security issues in Django\nClickjacking protection\nCross Site Request Forgery protection\nCryptographic signing\nSecurity Middleware\nInternationalization and localization\nDjango offers a robust internationalization and localization framework to\nassist you in the development of applications for multiple languages and world\nInternationalization\nLocalization\nLocalized web UI formatting and form input\nPerformance and optimization\nThere are a variety of techniques and tools that can help get your code running\nmore efficiently - faster, and using fewer system resources.\nPerformance and optimization overview\nGeographic framework\nintends to be a world-class geographic\nweb framework. Its goal is to make it as easy as possible to build GIS web\napplications and harness the power of spatially enabled data.\nCommon web application tools\nDjango offers multiple tools commonly needed in the development of web\napplications:\nAuthentication:\nUsing the authentication system\nPassword management\nCustomizing authentication\nAPI Reference\nSending emails\nSyndication feeds (RSS/Atom)\nMessages framework\nSerialization\nStatic files management\nData validation\nOther core functionalities\nLearn about some other core functionalities of the Django framework:\nConditional content processing\nContent types and generic relations\nSystem check framework\nThe sites framework\nUnicode in Django\nThe Django open-source project\nLearn about the development process for the Django project itself and about how\nyou can contribute:\nContributing to Django\nThe release process\nTeam organization\nThe Django source code repository\nSecurity policies\nMailing lists and Forum\nDesign philosophies:\nDocumentation:\nAbout this documentation\nThird-party distributions:\nDjango over time:\nAPI stability\nRelease notes and upgrading instructions\nDeprecation Timeline",
  "word_count": 879,
  "key_terms": [
    "authentication",
    "middleware",
    "framework",
    "method",
    "class",
    "deployment",
    "database",
    "api"
  ]
}