{
  "metadata": {
    "title": "Tutorial: Get started with Go",
    "url": "https://go.dev/doc/tutorial/getting-started",
    "technology": "go",
    "category": "programming_languages",
    "english_level": "B1",
    "professional_context": "development",
    "content_type": "technical_documentation",
    "last_updated": "1761765707.3013918"
  },
  "content": "Documentation\nTutorial: Get started with Go\nTutorial: Get started with Go\nIn this tutorial, you'll get a brief introduction to Go programming. Along the\nway, you will:\nInstall Go (if you haven't already).\nWrite some simple \"Hello, world\" code.\ncommand to run your code.\nUse the Go package discovery tool to find packages you can use in your own\nCall functions of an external module.\nFor other tutorials, see\nPrerequisites\nSome programming experience.\nThe code here is pretty\nsimple, but it helps to know something about functions.\nA tool to edit your code.\nAny text editor you have will\nwork fine. Most text editors have good support for Go. The most popular are\nVSCode (free), GoLand (paid), and Vim (free).\nA command terminal.\nGo works well using any terminal on\nLinux and Mac, and on PowerShell or cmd in Windows.\nJust use the\nDownload and install\nWrite some code\nGet started with Hello, World.\nOpen a command prompt and cd to your home directory.\nOn Linux or Mac:\nOn Windows:\ncd %HOMEPATH%\nCreate a hello directory for your first Go source code.\nFor example, use the following commands:\nmkdir hello\nEnable dependency tracking for your code.\nWhen your code imports packages contained in other modules, you manage\nthose dependencies through your code's own module. That module is defined\nby a go.mod file that tracks the modules that provide those packages. That\ngo.mod file stays with your code, including in your source code\nrepository.\nTo enable dependency tracking for your code by creating a go.mod file, run\ngo mod init\ngiving it the name of the module your code will be in. The name is the\nmodule's module path.\nIn actual development, the module path will typically be the repository\nlocation where your source code will be kept. For example, the module\npath might be\ngithub.com/mymodule\n. If you plan to publish\nyour module for others to use, the module path\nlocation from which Go tools can download your module. For more about\nnaming a module with a module path, see\ndependencies\nFor the purposes of this tutorial, just use\nexample/hello\n$ go mod init example/hello\ngo: creating new go.mod: module example/hello\nIn your text editor, create a file hello.go in which to write your code.\nPaste the following code into your hello.go file and save the file.\npackage main\nimport \"fmt\"\nfunc main() {\nfmt.Println(\"Hello, World!\")\nThis is your Go code. In this code, you:\npackage (a package is a way to group\nfunctions, and it's made up of all the files in the same directory).\nImport the popular\nwhich contains functions for formatting text, including printing to the\nconsole. This package is one of the\nstandard library\npackages you got\nwhen you installed Go.\nImplement a\nfunction to print a message to the\nfunction executes by default when you run\nRun your code to see the greeting.\nHello, World!\nis one of many\ncommands you'll use to get things done with\nGo. Use the following command to get a list of the others:\nCall code in an external package\nWhen you need your code to do something that might have been implemented by\nsomeone else, you can look for a package that has functions you can use in\nMake your printed message a little more interesting with a function from an\nexternal module.\nVisit pkg.go.dev and\nsearch for a \"quote\" package\nIn the search results, locate and click on the v1 of the\nrsc.io/quote\n(it should be listed with the \"Other major versions\" of\nrsc.io/quote/v4\nDocumentation\nsection, under\nlist of functions you can call from your code. You'll use the\nAt the top of this page, note that package\nincluded in the\nrsc.io/quote\nYou can use the pkg.go.dev site to find published modules whose packages\nhave functions you can use in your own code. Packages are published in\nmodules -- like\nrsc.io/quote\n-- where others can use them.\nModules are improved with new versions over time, and you can upgrade your\ncode to use the improved versions.\nIn your Go code, import the\nrsc.io/quote\npackage and add a call\nAfter adding the highlighted lines, your code should include the\npackage main\nimport \"fmt\"\nimport \"rsc.io/quote\"\nfunc main() {\nfmt.Println(quote.Go())\nAdd new module requirements and sums.\nGo will add the\nmodule as a requirement, as well as a\ngo.sum file for use in authenticating the module. For more, see\nAuthenticating modules\nModules Reference.\nRun your code to see the message generated by the function you're calling.\nDon't communicate by sharing memory, share memory by communicating.\nNotice that your code calls the\nfunction, printing a\nclever message about communication.\nWhen you ran\ngo mod tidy\n, it located and downloaded the\nrsc.io/quote\nmodule that contains the package you imported.\nBy default, it downloaded the latest version -- v1.5.2.\nWrite more code\nWith this quick introduction, you got Go installed and learned some of the\nbasics. To write some more code with another tutorial, take a look at\nCreate a Go module",
  "word_count": 830,
  "key_terms": [
    "function",
    "import"
  ]
}