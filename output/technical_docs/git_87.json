{
  "metadata": {
    "title": "Git Cheat Sheet",
    "url": "https://git-scm.com/cheat-sheet",
    "technology": "git",
    "category": "tools_platforms",
    "english_level": "B1",
    "professional_context": "collaboration",
    "content_type": "technical_documentation",
    "last_updated": "1761766032.6046877"
  },
  "content": "Git Cheat Sheet\nGetting Started\nStart a new repo:\nClone an existing repo:\ngit clone <url>\nPrepare to Commit\nAdd untracked file or unstaged changes:\ngit add <file>\nAdd all untracked files and unstaged changes:\nChoose which parts of a file to stage:\ngit mv <old> <new>\nDelete file:\ngit rm <file>\nTell Git to forget about a file without deleting it:\ngit rm --cached <file>\nUnstage one file:\ngit reset <file>\nUnstage everything:\nCheck what you added:\nMake Commits\nMake a commit (and open text editor to write message):\nMake a commit:\ngit commit -m 'message'\nCommit all unstaged changes:\ngit commit -am 'message'\nMove Between Branches\nSwitch branches:\ngit switch <name>\ngit checkout <name>\nCreate a branch:\ngit switch -c <name>\ngit checkout -b <name>\nList branches:\nList branches by most recently committed to:\n--sort=-committerdate\nDelete a branch:\ngit branch -d <name>\nForce delete a branch:\ngit branch -D <name>\nDiff Staged/Unstaged Changes\nDiff all staged and unstaged changes:\ngit diff HEAD\nDiff just staged changes:\ngit diff --staged\nDiff just unstaged changes:\nDiff Commits\nShow diff between a commit and its parent:\ngit show <commit>\nDiff two commits:\ngit diff <commit> <commit>\nDiff one file since a commit:\ngit diff <commit> <file>\nShow a summary of a diff:\ngit diff <commit> --stat\ngit show <commit> --stat\nWays to refer to a commit\nEvery time we say\n, you can use any of these:\na commit ID\na remote branch\norigin/main\ncurrent commit\n3 commits ago\nHEAD^^^ or HEAD~3\nDiscard Your Changes\nDelete unstaged changes to one file:\ngit restore <file>\ngit checkout <file>\nDelete all staged and unstaged changes to one file:\ngit restore --staged --worktree <file>\ngit checkout HEAD <file>\nDelete all staged and unstaged changes:\ngit reset --hard\nDelete untracked files:\n'Stash' all staged and unstaged changes:\nEdit History\n\"Undo\" the most recent commit (keep your working directory the same):\ngit reset HEAD^\nSquash the last 5 commits into one:\ngit rebase -i HEAD~6\nThen change \"pick\" to \"fixup\" for any commit you want to combine with the previous one\nUndo a failed rebase:\ngit reflog BRANCHNAME\nThen manually find the right commit ID in the reflog, then run:\ngit reset --hard <commit>\nChange a commit message (or add a file you forgot):\ngit commit --amend\nCode Archaeology\nLook at a branch's history:\ngit log main\ngit log --graph main\ngit log --oneline\nShow every commit that modified a file:\ngit log <file>\nShow every commit that modified a file, including before it was renamed:\ngit log --follow <file>\nFind every commit that added or removed some text:\ngit log -G banana\nShow who last changed each line of a file:\ngit blame <file>\nCombine Diverged Branches\nCombine with rebase:\ngit switch banana\ngit rebase main\nCombine with merge:\ngit switch main\ngit merge banana\nCombine with squash merge:\ngit switch main\ngit merge --squash banana\nBring a branch up to date with another branch (aka \"fast-forward merge\"):\ngit switch main\ngit merge banana\nCopy one commit onto the current branch:\ngit cherry-pick <commit>\nRestore an Old File\nGet the version of a file from another commit:\ngit checkout <commit> <file>\ngit restore <file> --source <commit>\nAdd a Remote\ngit remote add <name> <url>\nPush Your Changes\nbranch to the remote\ngit push origin main\nPush the current branch to its remote \"tracking branch\":\nPush a branch that you've never pushed before:\ngit push -u origin <name>\nForce push:\ngit push --force-with-lease\ngit push --tags\nPull Changes\nFetch changes (but don't change any of your local branches):\ngit fetch origin main\nFetch changes and then rebase your current branch:\ngit pull --rebase\nFetch changes and then merge them into your current branch:\ngit pull origin main\nConfigure Git\nSet a config option:\ngit config user.name 'Your Name'\nSet option globally:\ngit config --global ...\nAdd an alias:\ngit config alias.st status\nSee all possible config options:\nman git-config\nImportant Files\nLocal git config:\n.git/config\nGlobal git config:\n~/.gitconfig\nList of files to ignore:",
  "word_count": 668,
  "key_terms": []
}