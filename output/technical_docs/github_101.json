{
  "metadata": {
    "title": "Uploading a project to GitHub",
    "url": "https://docs.github.com/en/get-started/start-your-journey/uploading-a-project-to-github",
    "technology": "github",
    "category": "tools_platforms",
    "english_level": "B1",
    "professional_context": "collaboration",
    "content_type": "technical_documentation",
    "last_updated": "1761766057.7958477"
  },
  "content": "Uploading a project to GitHub\nLearn how to upload the files for your project to GitHub.\nIn this article\nIntroduction\nThis tutorial will show you how to upload a group of files to a GitHub repository.\nUploading your files to a GitHub repository lets you:\nApply version control\nwhen you make edits to the files, so your project's history is protected and manageable.\nyour work, because your files are now stored in the cloud.\nthe repository to your personal profile, so that others can see your work.\nand discuss your work with others, either publicly or privately.\nIf you're already familiar with Git, and you're looking for information on how to upload a locally-stored Git repository to GitHub, see\nAdding locally hosted code to GitHub\nPrerequisites\nYou must have a GitHub account. For more information, see\nCreating an account on GitHub\nYou should have a group of files you'd like to upload.\nStep 1: Create a new repository for your project\nIt's a good idea to create a new repository for each individual project you're working on. If you're writing a software project, grouping all the related files in a new repository makes it easier to maintain and manage the codebase over time.\nIn the upper-right corner of any page, select\n, then click\nNew repository\nIn the \"Repository name\" box, type a name for your project. For example, type \"my-first-project.\"\nIn the \"Description\" box, type a short description. For example, type \"This is my first project on GitHub.\"\nSelect whether your repository will be\n. Select \"Public\" if you want others to be able to see your project.\nAdd a README file\n. You will edit this file in a later step.\nCreate repository\nStep 2: Upload files to your project's repository\nSo far, you should only see one file listed in the repository, the\nfile you created when you initialized the repository. Now, we'll upload some of your own files.\nTo the right of the page, select the\ndropdown menu.\nFrom the dropdown menu, click\nUpload files\nOn your computer, open the folder containing your work, then drag and drop all files and folders into the browser.\nAt the bottom of the page, under \"Commit changes\", select \"Commit directly to the\nbranch, then click\nCommit changes\nStep 3: Edit the README file for your project's repository\nYour repository's README file is typically the first item someone will see when visiting your repository. It usually contains information on what your project is about and why your project is useful.\nAs we learned in the\nHello World\ntutorial, the README file (\n) is written in Markdown syntax. Markdown is an easy-to-read, easy-to-write language for formatting plain text.\nIn this step, we'll edit your project's\nusing Markdown so that it includes some basic information about your project.\nFrom the list of files, click\nto view the file.\nIn the upper right corner of the file view, click\nto open the file editor.\nYou will see that some information about your project has been pre-filled for you. For example, you should see the repository name and repository description you completed in Step 1 displayed on line 1 and line 2.\nDelete the existing text apart from\n, then type a proper title for your project.\n# About my first project on GitHub\nNext, add some information about your project, such as a description of the project's purpose or its main features.\nIf you're not sure what to write, take a look at other repositories on GitHub to see how other people describe their projects.\nTo apply more sophisticated formatting, such as adding images, links, and footnotes, see\nBasic writing and formatting syntax\nAbove the new content, click\nTake a look at how the file will render once we save our changes, then toggle back to \"Edit\".\nContinue to edit and preview the text until you're happy with the content of your README.\nIn the top right, click\nCommit changes\nIn the dialog box that opens, a commit message has been pre-filled for you (\"Update README.md\") and, by default, the option to \"Commit directly to the\nbranch\" has been selected. Leave these options as they are and go ahead and click\nCommit changes\nYou have now created a new repository, uploaded some files to it, and added a project README.\nIf you set your repository visibility to \"Public,\" the repository will be displayed on your personal profile and you can share the URL of your repository with others.\nAs you add, edit or delete files directly in the browser on GitHub, GitHub will track these changes (\"commits\"), so you can start to manage your project's history and evolution.\nWhen making changes, remember that you can create a new branch from the\nbranch of your repository, so that you can experiment without affecting the main copy of files. Then, when you're happy with a set of a changes, open a pull request to merge the changes into your\nbranch. For a reminder of how to do this, see\nHello World\nMost people want to keep working on their files locally (i.e. on their own computer), and then continually sync these locally-made changes with this \"remote\" (in the cloud) repository on GitHub. There are plenty of tools that let you do this, such as GitHub Desktop. To get started, you'd need to:\nGitHub Desktop. For more information, see\nGetting started with GitHub Desktop\nthe remote repository, so you have a copy of it on your own computer. For more information, see\nCloning and forking repositories from GitHub Desktop\nContinually\nyour local changes with this remote repository. For more information, see\nSyncing your branch in GitHub Desktop\nTo learn more about other tools available for working with repositories hosted on GitHub, see\nConnecting to GitHub\nFurther reading\nAbout the repository README file\nManaging files\nCloning a repository",
  "word_count": 972,
  "key_terms": []
}