{
  "metadata": {
    "title": "TypeScript for JavaScript Programmers",
    "url": "https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html",
    "technology": "typescript",
    "category": "programming_languages",
    "english_level": "B1",
    "professional_context": "development",
    "content_type": "technical_documentation",
    "last_updated": "1761765704.8681345"
  },
  "content": "Was this page helpful?\nTypeScript for JavaScript Programmers\nTypeScript stands in an unusual relationship to JavaScript. TypeScript offers all of JavaScript’s features, and an additional layer on top of these: TypeScript’s type system.\nFor example, JavaScript provides language primitives like\n, but it doesn’t check that you’ve consistently assigned these. TypeScript does.\nThis means that your existing working JavaScript code is also TypeScript code. The main benefit of TypeScript is that it can highlight unexpected behavior in your code, lowering the chance of bugs.\nThis tutorial provides a brief overview of TypeScript, focusing on its type system.\nTypes by Inference\nTypeScript knows the JavaScript language and will generate types for you in many cases.\nFor example in creating a variable and assigning it to a particular value, TypeScript will use the value as its type.\n\"Hello World\"\nlet helloWorld: string\nBy understanding how JavaScript works, TypeScript can build a type-system that accepts JavaScript code but has types. This offers a type-system without needing to add extra characters to make types explicit in your code. That’s how TypeScript knows that\nin the above example.\nYou may have written JavaScript in Visual Studio Code, and had editor auto-completion. Visual Studio Code uses TypeScript under the hood to make it easier to work with JavaScript.\nDefining Types\nYou can use a wide variety of design patterns in JavaScript. However, some design patterns make it difficult for types to be inferred automatically (for example, patterns that use dynamic programming). To cover these cases, TypeScript supports an extension of the JavaScript language, which offers places for you to tell TypeScript what the types should be.\nFor example, to create an object with an inferred type which includes\nname: string\n, you can write:\nYou can explicitly describe this object’s shape using an\ndeclaration:\nYou can then declare that a JavaScript object conforms to the shape of your new\nby using syntax like\nafter a variable declaration:\nIf you provide an object that doesn’t match the interface you have provided, TypeScript will warn you:\nSince JavaScript supports classes and object-oriented programming, so does TypeScript. You can use an interface declaration with classes:\nYou can use interfaces to annotate parameters and return values to functions:\ngetAdminUser\nThere is already a small set of primitive types available in JavaScript:\n, which you can use in an interface. TypeScript extends this list with a few more, such as\n(allow anything),\n(ensure someone using this type declares what the type is),\n(it’s not possible that this type could happen), and\n(a function which returns\nor has no return value).\nYou’ll see that there are two syntaxes for building types:\nInterfaces and Types\n. You should prefer\nwhen you need specific features.\nComposing Types\nWith TypeScript, you can create complex types by combining simple ones. There are two popular ways to do so: unions and generics.\nWith a union, you can declare that a type could be one of many types. For example, you can describe a\ntype as being either\nIf you hover over\nabove, you’ll see that it is classed as\n. That’s a property of the Structural Type System. More on this below.\nA popular use-case for union types is to describe the set of\nthat a value is allowed to be:\nUnions provide a way to handle different types too. For example, you may have a function that takes an\nTo learn the type of a variable, use\ntypeof s === \"string\"\ntypeof n === \"number\"\ntypeof b === \"boolean\"\ntypeof undefined === \"undefined\"\ntypeof f === \"function\"\nArray.isArray(a)\nFor example, you can make a function return different values depending on whether it is passed a string or an array:\nGenerics provide variables to types. A common example is an array. An array without generics could contain anything. An array with generics can describe the values that the array contains.\nYou can declare your own types that use generics:\nStructural Type System\nOne of TypeScript’s core principles is that type checking focuses on the\nthat values have. This is sometimes called “duck typing” or “structural typing”.\nIn a structural type system, if two objects have the same shape, they are considered to be of the same type.\nvariable is never declared to be a\ntype. However, TypeScript compares the shape of\nto the shape of\nin the type-check. They have the same shape, so the code passes.\nThe shape-matching only requires a subset of the object’s fields to match.\nThere is no difference between how classes and objects conform to shapes:\nIf the object or class has all the required properties, TypeScript will say they match, regardless of the implementation details.\nThis was a brief overview of the syntax and tools used in everyday TypeScript. From here, you can:\nRead the full Handbook\nfrom start to finish\nExplore the\nPlayground examples\nThe TypeScript docs are an open source project. Help us improve these pages\nby sending a Pull Request\nContributors to this page:\nLast updated: Oct 28, 2025",
  "word_count": 831,
  "key_terms": [
    "return",
    "class",
    "function",
    "implementation",
    "variable",
    "object",
    "interface"
  ]
}