{
  "metadata": {
    "title": "Grammar and types",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types",
    "technology": "javascript",
    "category": "programming_languages",
    "english_level": "B1",
    "professional_context": "development",
    "content_type": "technical_documentation",
    "last_updated": "1761765686.0779934"
  },
  "content": "Grammar and types\nThis chapter discusses JavaScript's basic grammar, variable declarations, data types and literals.\nJavaScript borrows most of its syntax from Java, C, and C++, but it has also been influenced by Awk, Perl, and Python.\nJavaScript is\ncase-sensitive\nand uses the\ncharacter set. For example, the word Früh (which means \"early\" in German) could be used as a variable name.\nconst Früh = \"foobar\";\nBut, the variable\nis not the same as\nbecause JavaScript is case sensitive.\nIn JavaScript, instructions are called\nand are separated by semicolons (;).\nA semicolon is not necessary after a statement if it is written on its own line. But if more than one statement on a line is desired, then they\nbe separated by semicolons.\nECMAScript also has rules for automatic insertion of semicolons (\n) to end statements. (For more information, see the detailed reference about JavaScript's\nlexical grammar\nIt is considered best practice, however, to always write a semicolon after a statement, even when it is not strictly needed. This practice reduces the chances of bugs getting into the code.\nThe source text of JavaScript script gets scanned from left to right, and is converted into a sequence of input elements which are\ncontrol characters\nline terminators\n. (Spaces, tabs, and newline characters are considered whitespace.)\nThe syntax of\nis the same as in C++ and in many other languages:\n/* this is a longer,\n* multi-line comment\nYou can't nest block comments. This often happens when you accidentally include a\nsequence in your comment, which will terminate the comment.\n/* You can't, however, /* nest comments */ SyntaxError */\nIn this case, you need to break up the\npattern. For example, by inserting a backslash:\n/* You can /* nest comments *\\/ by escaping slashes */\nComments behave like whitespace, and are discarded during script execution.\nYou might also see a third type of comment syntax at the start of some JavaScript files, which looks something like this:\n#!/usr/bin/env node\nThis is called\nhashbang comment\nsyntax, and is a special comment used to specify the path to a particular JavaScript engine that should execute the script. See\nHashbang comments\nfor more details.\nDeclarations\nJavaScript has three kinds of variable declarations.\nDeclares a variable, optionally initializing it to a value.\nDeclares a block-scoped, local variable, optionally initializing it to a value.\nDeclares a block-scoped, read-only named constant.\nYou use variables as symbolic names for values in your application. The names of variables, called\nidentifiers\n, conform to certain rules.\nA JavaScript identifier usually starts with a letter, underscore (\n), or dollar sign (\n). Subsequent characters can also be digits (\n). Because JavaScript is case sensitive, letters include the characters\n(uppercase) as well as\n(lowercase).\nYou can use most Unicode letters such as\nin identifiers. (For more details, see the\nlexical grammar\nreference.) You can also use\nUnicode escape sequences\nto represent characters in identifiers.\nSome examples of legal names are\nNumber_hits\nDeclaring variables\nYou can declare a variable in two ways:\nWith the keyword\n. For example,\n. This syntax can be used to declare both\nvariables, depending on the\nexecution context\nWith the keyword\n. For example,\n. This syntax can be used to declare a block-scope local variable. (See\nVariable scope\nYou can declare variables to unpack values using the\ndestructuring\nsyntax. For example,\nconst { bar } = foo\n. This will create a variable named\nand assign to it the value corresponding to the key of the same name from our object\nVariables should always be declared before they are used. JavaScript used to allow assigning to undeclared variables, which creates an\nundeclared global\nvariable. This is an error in\nstrict mode\nand should be avoided altogether.\nDeclaration and initialization\nIn a statement like\npart is called a\ndeclaration\npart is called an\ninitializer\n. The declaration allows the variable to be accessed later in code without throwing a\nReferenceError\n, while the initializer assigns a value to the variable. In\ndeclarations, the initializer is optional. If a variable is declared without an initializer, it is assigned the value\nconsole.log(x); // logs \"undefined\"\nIn essence,\nis equivalent to\nlet x; x = 42\ndeclarations always need an initializer, because they forbid any kind of assignment after declaration, and implicitly initializing it with\nis likely a programmer mistake.\nconst x; // SyntaxError: Missing initializer in const declaration\nVariable scope\nA variable may belong to one of the following\nGlobal scope: The default scope for all code running in script mode.\nModule scope: The scope for code running in module mode.\nFunction scope: The scope created with a\nIn addition, variables declared with\ncan belong to an additional scope:\nBlock scope: The scope created with a pair of curly braces (a\nWhen you declare a variable outside of any function, it is called a\nvariable, because it is available to any other code in the current document. When you declare a variable within a function, it is called a\nvariable, because it is available only within that function.\ndeclarations can also be scoped to the\nblock statement\nthat they are declared in.\nif (Math.random() > 0.5) {\nconst y = 5;\nconsole.log(y); // ReferenceError: y is not defined\nHowever, variables created with\nare not block-scoped, but only local to the\nfunction (or global scope)\nthat the block resides within.\nFor example, the following code will log\n, because the scope of\nis the global context (or the function context if the code is part of a function). The scope of\nis not limited to the immediate\nstatement block.\nif (true) {\nconsole.log(x); // x is 5\nVariable hoisting\n-declared variables are\n, meaning you can refer to the variable anywhere in its scope, even if its declaration isn't reached yet. You can see\ndeclarations as being \"lifted\" to the top of its function or global scope. However, if you access a variable before it's declared, the value is always\n, because only its\ndeclaration\ndefault initialization (with\nis hoisted, but not its\nvalue assignment\nThe above examples will be interpreted the same as:\nBecause of hoisting, all\nstatements in a function should be placed as near to the top of the function as possible. This best practice increases the clarity of the code.\nare hoisted is a matter of definition debate. Referencing the variable in the block before the variable declaration always results in a\nReferenceError\n, because the variable is in a \"\ntemporal dead zone\n\" from the start of the block until the declaration is processed.\nconsole.log(x); // ReferenceError\nconst x = 3;\nconsole.log(y); // ReferenceError\ndeclarations, which only hoist the declaration but not its value,\nfunction declarations\nare hoisted entirely — you can safely call the function anywhere in its scope. See the\nglossary entry for more discussion.\nGlobal variables\nGlobal variables are in fact properties of the\nglobal object\nIn web pages, the global object is\n, so you can read and set global variables using the\nwindow.variable\nsyntax. In all environments, the\nvariable (which itself is a global variable) may be used to read and set global variables. This is to provide a consistent interface among various JavaScript runtimes.\nConsequently, you can access global variables declared in one window or frame from another window or frame by specifying the\nname. For example, if a variable called\nphoneNumber\nis declared in a document, you can refer to this variable from an\nparent.phoneNumber\nYou can create a read-only, named constant with the\nkeyword. The syntax of a constant identifier is the same as any variable identifier: it must start with a letter, underscore, or dollar sign (\n), and can contain alphabetic, numeric, or underscore characters.\nconst PI = 3.14;\nA constant cannot change value through assignment or be re-declared while the script is running. It must be initialized to a value. The scope rules for constants are the same as those for\nblock-scope variables.\nYou cannot declare a constant with the same name as a function or variable in the same scope. For example:\nonly prevents\nre-assignments\n, but doesn't prevent\n. The properties of objects assigned to constants are not protected, so the following statement is executed without problems.\nconst MY_OBJECT = { key: \"value\" };\nMY_OBJECT.key = \"otherValue\";\nAlso, the contents of an array are not protected, so the following statement is executed without problems.\nData structures and types\nThe latest ECMAScript standard defines eight data types:\nSeven data types that are\n. A special keyword denoting a null value. (Because JavaScript is case-sensitive,\nis not the same as\n, or any other variant.)\n. A top-level property whose value is not defined.\n. An integer or floating point number. For example:\n. An integer with arbitrary precision. For example:\n9007199254740992n\n. A sequence of characters that represent a text value. For example:\n. A data type whose instances are unique and immutable.\nAlthough these data types are relatively few, they enable you to perform useful operations with your applications.\nare the other fundamental elements of the language. While functions are technically a kind of object, you can think of objects as named containers for values, and functions as procedures that your script can perform.\nData type conversion\nJavaScript is a\ndynamically typed\nlanguage. This means you don't have to specify the data type of a variable when you declare it. It also means that data types are automatically converted as-needed during script execution.\nSo, for example, you could define a variable as follows:\nlet answer = 42;\nAnd later, you could assign the same variable a string value, for example:\nanswer = \"Thanks for all the fish!\";\nBecause JavaScript is dynamically typed, this assignment does not cause an error message.\nNumbers and the '+' operator\nIn expressions involving numeric and string values with the\noperator, JavaScript converts numeric values to strings. For example, consider the following statements:\nWith all other operators, JavaScript does\nconvert numeric values to strings. For example:\n\"37\" - 7; // 30\n\"37\" * 7; // 259\nConverting strings to numbers\nIn the case that a value representing a number is in memory as a string, there are methods for conversion.\nparseFloat()\nonly returns whole numbers, so its use is diminished for decimals.\nAdditionally, a best practice for\nis to always include the\nparameter. The radix parameter is used to specify which numerical system is to be used.\nparseInt(\"101\", 2); // 5\nAn alternative method of retrieving a number from a string is with the\n(unary plus) operator. This implicitly performs\nnumber conversion\n, which is the same process as the\nrepresent values in JavaScript. These are fixed values—not variables—that you\nprovide in your script. This section describes the following types of literals:\nArray literals\nBoolean literals\nNumeric literals\nObject literals\nRegExp literals\nString literals\nArray literals\nAn array literal is a list of zero or more expressions, each of which represents an array element, enclosed in square brackets (\n). When you create an array using an array literal, it is initialized with the specified values as its elements, and its\nis set to the number of arguments specified.\nThe following example creates the\narray with three elements and a\nconst coffees = [\"French Roast\", \"Colombian\", \"Kona\"];\nAn array literal creates a new array object every time the literal is evaluated. For example, an array defined with a literal in the global scope is created once when the script loads. However, if the array literal is inside a function, a new array is instantiated every time that function is called.\nArray literals create\nobjects. See\nIndexed collections\nfor details on\nExtra commas in array literals\nIf you put two commas in a row in an array literal, the array leaves an empty slot for the unspecified element. The following example creates the\nconst fish = [\"Lion\", , \"Angel\"];\nWhen you log this array, you will see:\nconsole.log(fish);\nNote that the second item is \"empty\", which is not exactly the same as the actual\nvalue. When using array-traversing methods like\nArray.prototype.map\n, empty slots are skipped. However, index-accessing\nstill returns\nIf you include a trailing comma at the end of the list of elements, the comma is ignored.\nIn the following example, the\nof the array is three. There is no\nis empty. All other commas in the list indicate a new element.\nconst myList = [\"home\", , \"school\"];\nIn the following example, the\nof the array is four, and\nare missing.\nconst myList = [, \"home\", , \"school\"];\nIn the following example, the\nof the array is four, and\nare missing.\nOnly the last comma is ignored.\nconst myList = [\"home\", , \"school\", ,];\nTrailing commas\nhelp keep git diffs clean when you have a multi-line array, because appending an item to the end only adds one line, but does not modify the previous line.\nconst myList = [\n+ \"hospital\",\nUnderstanding the behavior of extra commas is important to understanding JavaScript as a language.\nHowever, when writing your own code, you should explicitly declare the missing elements as\n, or at least insert a comment to highlight its absence. Doing this increases your code's clarity and maintainability.\nconst myList = [\"home\", /* empty */, \"school\", /* empty */, ];\nBoolean literals\nThe Boolean type has two literal values:\nDo not confuse the primitive Boolean values\nwith the true and false values of the\nThe Boolean object is a wrapper around the primitive Boolean data type. See\nfor more information.\nNumeric literals\nJavaScript numeric literals include integer literals in different bases as well as floating-point literals in base-10.\nNote that the language specification requires numeric literals to be unsigned. Nevertheless, code fragments like\nare fine, being interpreted as a unary\noperator applied to the numeric literal\nInteger literals\nInteger and\nliterals can be written in decimal (base 10), hexadecimal (base 16), octal (base 8) and binary (base 2).\ninteger literal is a sequence of digits without a leading\n(zero) on an integer literal, or a leading\n) indicates it is in\n. Octal integer literals can include only the digits\n) indicates a\nhexadecimal\ninteger literal. Hexadecimal integers can include digits (\n) and the letters\n. (The case of a character does not change its value. Therefore:\n) indicates a\ninteger literal. Binary integer literals can only include the digits\nsuffix on an integer literal indicates a\nliteral. The\nliteral can use any of the above bases. Note that leading-zero octal syntax like\nis not allowed, but\nSome examples of integer literals are:\nFor more information, see\nNumeric literals in the Lexical grammar reference\nFloating-point literals\nA floating-point literal can have the following parts:\nAn unsigned decimal integer,\nA decimal point (\nA fraction (another decimal number),\nAn exponent.\nThe exponent part is an\nfollowed by an integer, which can be signed (preceded by\n). A floating-point literal must have at least one digit, and either a decimal point or\nMore succinctly, the syntax is:\n[digits].[digits][(E|e)[(+|-)]digits]\nFor example:\nObject literals\nAn object literal is a list of zero or more pairs of property names and associated values of an object, enclosed in curly braces (\nDo not use an object literal at the beginning of a statement! This will lead to an error (or not behave as you expect), because the\nwill be interpreted as the beginning of a block.\nThe following is an example of an object literal. The first element of the\nobject defines a property,\n, and assigns to it a new string,\n; the second element, the\nproperty, is immediately assigned the result of invoking the function\n(carTypes(\"Honda\"))\n; the third element, the\nproperty, uses an existing variable (\nAdditionally, you can use a numeric or string literal for the name of a property or nest an object inside another. The following example uses these options.\nObject property names can be any string, including the empty string. If the property name would not be a valid JavaScript\nor number, it must be enclosed in quotes.\nProperty names that are not valid identifiers cannot be accessed as a dot (\n) property.\nInstead, they must be accessed with the bracket notation (\nEnhanced Object literals\nObject literals support a range of shorthand syntaxes that include setting the prototype at construction, shorthand for\nassignments, defining methods, making\ncalls, and computing property names with expressions.\nTogether, these also bring object literals and class declarations closer together, and allow object-based design to benefit from some of the same conveniences.\nRegExp literals\nA regex literal (which is defined in detail\n) is a pattern enclosed between slashes. The following is an example of a regex literal.\nconst re = /ab+c/;\nString literals\nA string literal is zero or more characters enclosed in double (\n) or single (\n) quotation marks. A string must be delimited by quotation marks of the same type (that is, either both single quotation marks, or both double quotation marks).\nThe following are examples of string literals:\n'one line \\n another line'\n\"Joyo's cat\"\nYou should use string literals unless you specifically need to use a\nobject. See\nfor details on\nYou can call any of the\nobject's methods on a string literal value. JavaScript automatically converts the string literal to a temporary String object, calls the method, then discards the temporary String object. You can also use the\nproperty with a string literal:\nTemplate literals\nare also available. Template literals are enclosed by the back-tick (\ngrave accent\n) character instead of double or single quotes.\nTemplate literals provide syntactic sugar for constructing strings. (This is similar to string interpolation features in Perl, Python, and more.)\nTagged templates\nare a compact syntax for specifying a template literal along with a call to a \"tag\" function for parsing it. A tagged template is just a more succinct and semantic way to invoke a function that processes a string and a set of relevant values. The name of the template tag function precedes the template literal — as in the following example, where the template tag function is named\nfunction will interpolate the arguments and serialize any objects or arrays that may come up, avoiding the pesky\n[object Object]\nSince tagged template literals are just sugar of function calls, you can re-write the above as an equivalent function call:\nprint([\"I need to do:\\n\", \"\\nMy current progress is: \", \"\\n\"], todos, progress);\nThis may be reminiscent of the\nconsole.log\n-style interpolation:\nconsole.log(\"I need to do:\\n%o\\nMy current progress is: %o\\n\", todos, progress);\nYou can see how the tagged template reads more naturally than a traditional \"formatter\" function, where the variables and the template itself have to be declared separately.\nUsing special characters in strings\nIn addition to ordinary characters, you can also include special characters in strings, as shown in the following example.\n\"one line \\n another line\";\nThe following table lists the special characters that you can use in JavaScript strings.\nCarriage Return\nVertical tab\nApostrophe or single quote\nDouble quote\nBackslash character\nThe character with the Latin-1 encoding specified by up to three octal digits\n. For example,\nis the octal sequence for the copyright symbol.\nThe character with the Latin-1 encoding specified by the two hexadecimal digits\n. For example,\nis the hexadecimal sequence for the copyright symbol.\nThe Unicode character specified by the four hexadecimal digits\n. For example,\nis the Unicode sequence for the copyright symbol. See\nUnicode escape sequences\nUnicode code point escapes. For example,\nis the same as the Unicode escapes\n\\uD87E\\uDC04\nEscaping characters\nFor characters not listed in the table, a preceding backslash is ignored, but this usage is deprecated and should be avoided.\nYou can insert a quotation mark inside a string by preceding it with a backslash. This is known as\nthe quotation mark. For example:\nconst quote = \"He read \\\"The Cremation of Sam McGee\\\" by R.W. Service.\";\nconsole.log(quote);\nThe result of this would be:\nHe read \"The Cremation of Sam McGee\" by R.W. Service.\nTo include a literal backslash inside a string, you must escape the backslash character. For example, to assign the file path\nto a string, use the following:\nconst home = \"c:\\\\temp\";\nYou can also escape line breaks by preceding them with backslash. The backslash and line break are both removed from the value of the string.\nMore information\nThis chapter focuses on basic syntax for declarations and types. To learn more about JavaScript's language constructs, see also the following chapters in this guide:\nControl flow and error handling\nLoops and iteration\nExpressions and operators\nIn the next chapter, we will have a look at control flow constructs and error handling.\nHelp improve MDN\nLearn how to contribute\nThis page was last modified on\n⁨Jul 8, 2025⁩\nMDN contributors\nView this page on GitHub\nReport a problem with this content",
  "word_count": 3464,
  "key_terms": [
    "parameter",
    "return",
    "function",
    "method",
    "class",
    "variable",
    "object",
    "interface"
  ]
}