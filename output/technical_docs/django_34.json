{
  "metadata": {
    "title": "Writing your first Django app, part 1¶",
    "url": "https://docs.djangoproject.com/en/stable/intro/tutorial01/",
    "technology": "django",
    "category": "frameworks",
    "english_level": "B1",
    "professional_context": "deployment",
    "content_type": "technical_documentation",
    "last_updated": "1761765765.6060014"
  },
  "content": "Writing your first Django app, part 1\nLet’s learn by example.\nThroughout this tutorial, we’ll walk you through the creation of a basic\npoll application.\nIt’ll consist of two parts:\nA public site that lets people view polls and vote in them.\nAn admin site that lets you add, change, and delete polls.\nWe’ll assume you have\nDjango installed\nalready. You can\ntell Django is installed and which version by running the following command\nin a shell prompt (indicated by the $ prefix):\npy -m django --version\nIf Django is installed, you should see the version of your installation. If it\nisn’t, you’ll get an error telling “No module named django”.\nThis tutorial is written for Django 5.2, which supports Python 3.10 and\nlater. If the Django version doesn’t match, you can refer to the tutorial for\nyour version of Django by using the version switcher at the bottom right corner\nof this page, or update Django to the newest version. If you’re using an older\nversion of Python, check\nWhat Python version can I use with Django?\nto find a compatible\nversion of Django.\nWhere to get help:\nIf you’re having trouble going through this tutorial, please head over to\nGetting Help\nsection of the FAQ.\nCreating a project\nIf this is your first time using Django, you’ll have to take care of some\ninitial setup. Namely, you’ll need to auto-generate some code that establishes a\n– a collection of settings for an instance of Django,\nincluding database configuration, Django-specific options and\napplication-specific settings.\nFrom the command line,\ninto a directory where you’d like to store your\ncode and create a new directory named\ndjangotutorial\n. (This directory name\ndoesn’t matter to Django; you can rename it to anything you like.)\ndjangotutorial\ndjangotutorial\nThen, run the following command to bootstrap a new Django project:\ndjango-admin\nstartproject\ndjangotutorial\ndjango-admin startproject mysite djangotutorial\nThis will create a project called\ndjangotutorial\ndirectory. If it didn’t work, see\nProblems running django-admin\nYou’ll need to avoid naming projects after built-in Python or Django\ncomponents. In particular, this means you should avoid using names like\n(which will conflict with Django itself) or\nconflicts with a built-in Python package).\nLet’s look at what\nstartproject\nThese files are:\n: A command-line utility that lets you interact with this\nDjango project in various ways. You can read all the details about\ndjango-admin and manage.py\n: A directory that is the actual Python package for your\nproject. Its name is the Python package name you’ll need to use to import\nanything inside it (e.g.\nmysite.urls\nmysite/__init__.py\n: An empty file that tells Python that this\ndirectory should be considered a Python package. If you’re a Python beginner,\nmore about packages\nin the official Python docs.\nmysite/settings.py\n: Settings/configuration for this Django\nDjango settings\nwill tell you all about how settings\nmysite/urls.py\n: The URL declarations for this Django project; a\n“table of contents” of your Django-powered site. You can read more about\nURL dispatcher\nmysite/asgi.py\n: An entry-point for ASGI-compatible web servers to\nserve your project. See\nHow to deploy with ASGI\nfor more details.\nmysite/wsgi.py\n: An entry-point for WSGI-compatible web servers to\nserve your project. See\nHow to deploy with WSGI\nfor more details.\nThe development server\nLet’s verify your Django project works. Change into the\ndjangotutorial\ndirectory, if you haven’t already, and run the following commands:\npy manage.py runserver\nYou’ll see the following output on the command line:\nIgnore the warning about unapplied database migrations for now; we’ll deal\nwith the database shortly.\nNow that the server’s running, visit\nhttp://127.0.0.1:8000/\nwith your web\nbrowser. You’ll see a “Congratulations!” page, with a rocket taking off.\nYou’ve started the Django development server, a lightweight web server written\npurely in Python. We’ve included this with Django so you can develop things\nrapidly, without having to deal with configuring a production server – such as\nApache – until you’re ready for production.\nNow’s a good time to note:\nuse this server in anything resembling a\nproduction environment. It’s intended only for use while developing. (We’re in\nthe business of making web frameworks, not web servers.)\n(To serve the site on a different port, see the\nreference.)\nAutomatic reloading of\nThe development server automatically reloads Python code for each request\nas needed. You don’t need to restart the server for code changes to take\neffect. However, some actions like adding files don’t trigger a restart,\nso you’ll have to restart the server in these cases.\nCreating the Polls app\nNow that your environment – a “project” – is set up, you’re set to start\ndoing work.\nEach application you write in Django consists of a Python package that follows\na certain convention. Django comes with a utility that automatically generates\nthe basic directory structure of an app, so you can focus on writing code\nrather than creating directories.\nProjects vs. apps\nWhat’s the difference between a project and an app? An app is a web\napplication that does something – e.g., a blog system, a database of\npublic records or a small poll app. A project is a collection of\nconfiguration and apps for a particular website. A project can contain\nmultiple apps. An app can be in multiple projects.\nYour apps can live anywhere in your\nPython path\nthis tutorial, we’ll create our poll app inside the\ndjangotutorial\nTo create your app, make sure you’re in the same directory as\nand type this command:\npy manage.py startapp polls\nThat’ll create a directory\n, which is laid out like this:\nThis directory structure will house the poll application.\nWrite your first view\nLet’s write the first view. Open the file\npolls/views.py\nand put the following Python code in it:\npolls/views.py\nThis is the most basic view possible in Django. To access it in a browser, we\nneed to map it to a URL - and for this we need to define a URL configuration,\nor “URLconf” for short. These URL configurations are defined inside each\nDjango app, and they are Python files named\nTo define a URLconf for the\napp, create a file\npolls/urls.py\nwith the following content:\npolls/urls.py\nYour app directory should now look like:\nThe next step is to configure the root URLconf in the\ninclude the URLconf defined in\n. To do this, add an import for\ndjango.urls.include\nmysite/urls.py\nand insert an\nurlpatterns\nlist, so you have:\nmysite/urls.py\nfunction expects at least two arguments:\nfunction allows referencing other URLconfs.\nWhenever Django encounters\n, it chops off whatever\npart of the URL matched up to that point and sends the remaining string to the\nincluded URLconf for further processing.\nThe idea behind\nis to make it easy to\nplug-and-play URLs. Since polls are in their own URLconf\npolls/urls.py\n), they can be placed under “/polls/”, or under\n“/fun_polls/”, or under “/content/polls/”, or any other path root, and the\napp will still work.\nWhen to use\nYou should always use\nwhen you include other URL patterns.\nThe only exception is\nadmin.site.urls\n, which is a pre-built URLconf\nprovided by Django for the default admin site.\nYou have now wired an\nview into the URLconf. Verify it’s working with\nthe following command:\npy manage.py runserver\nhttp://localhost:8000/polls/\nin your browser, and you should see the\nHello, world. You’re at the polls index.\n”, which you defined in the\nPage not found?\nIf you get an error page here, check that you’re going to\nhttp://localhost:8000/polls/\nhttp://localhost:8000/\nWhen you’re comfortable with the basic request and response flow, read\npart 2 of this tutorial\nto start working with the",
  "word_count": 1254,
  "key_terms": [
    "import",
    "database",
    "function",
    "configuration"
  ]
}