{
  "metadata": {
    "title": "Hello World",
    "url": "https://docs.github.com/en/get-started/quickstart/hello-world",
    "technology": "github",
    "category": "tools_platforms",
    "english_level": "B1",
    "professional_context": "collaboration",
    "content_type": "technical_documentation",
    "last_updated": "1761766040.7026544"
  },
  "content": "Hello World\nFollow this Hello World exercise to learn GitHub's pull request workflow.\nIn this article\nIntroduction\nThis tutorial teaches you GitHub essentials like repositories, branches, commits, and pull requests. You'll create your own Hello World repository and learn GitHub's pull request workflow, a popular way to create and review code.\nIn this quickstart guide, you will:\nCreate and use a repository.\nStart and manage a new branch.\nMake changes to a file and push them to GitHub as commits.\nOpen and merge a pull request.\nPrerequisites\nYou must have a GitHub account. For more information, see\nCreating an account on GitHub\nYou don't need to know how to code, use the command line, or install Git (the version control software that GitHub is built on).\nStep 1: Create a repository\nThe first thing we'll do is create a repository. You can think of a repository as a folder that contains related items, such as files, images, videos, or even other folders. A repository usually groups together items that belong to the same \"project\" or thing you're working on.\nOften, repositories include a README file, a file with information about your project. README files are written in Markdown, which is an easy-to-read, easy-to-write language for formatting plain text. We'll learn more about Markdown in the next tutorial,\nSetting up your profile\nGitHub lets you add a README file at the same time you create your new repository. GitHub also offers other common options such as a license file, but you do not have to select any of them now.\nhello-world\nrepository can be a place where you store ideas, resources, or even share and discuss things with others.\nIn the upper-right corner of any page, select\n, then click\nNew repository\nIn the \"Repository name\" box, type\nhello-world\nIn the \"Description\" box, type a short description. For example, type \"This repository is for practicing the GitHub Flow.\"\nSelect whether your repository will be\nAdd a README file\nCreate repository\nStep 2: Create a branch\nBranching lets you have different versions of a repository at one time.\nBy default, your repository has one branch named\nthat is considered to be the definitive branch. You can create additional branches off of\nin your repository.\nBranching is helpful when you want to add new features to a project without changing the main source of code. The work done on different branches will not show up on the main branch until you merge it, which we will cover later in this guide. You can use branches to experiment and make edits before committing them to\nWhen you create a branch off the\nbranch, you're making a copy, or snapshot, of\nas it was at that point in time. If someone else made changes to the\nbranch while you were working on your branch, you could pull in those updates.\nThis diagram shows:\nA new branch called\nThe journey that\ntakes through stages for \"Commit changes,\" \"Submit pull request,\" and \"Discuss proposed changes\" before it's merged into\nCreating a branch\ntab of your\nhello-world\nrepository.\nAbove the file list, click the dropdown menu that says\nType a branch name,\nreadme-edits\n, into the text box.\nCreate branch: readme-edits from main\nNow you have two branches,\nreadme-edits\n. Right now, they look exactly the same. Next you'll add changes to the new\nreadme-edits\nStep 3: Make and commit changes\nWhen you created a new branch in the previous step, GitHub brought you to the code page for your new\nreadme-edits\nbranch, which is a copy of\nYou can make and save changes to the files in your repository. On GitHub, saved changes are called commits. Each commit has an associated commit message, which is a description explaining why a particular change was made. Commit messages capture the history of your changes so that other contributors can understand what youâ€™ve done and why.\nreadme-edits\nbranch you created, click the\nTo edit the file, click\nIn the editor, write a bit about yourself.\nCommit changes\nIn the \"Commit changes\" box, write a commit message that describes your changes.\nCommit changes\nThese changes will be made only to the README file on your\nreadme-edits\nbranch, so now this branch contains content that's different from\nStep 4: Open a pull request\nNow that you have changes in a branch off of\n, you can open a pull request.\nPull requests are the heart of collaboration on GitHub. When you open a pull request, you're proposing your changes and requesting that someone review and pull in your contribution and merge them into their branch. Pull requests show diffs, or differences, of the content from both branches. The changes, additions, and subtractions are shown in different colors.\nAs soon as you make a commit, you can open a pull request and start a discussion, even before the code is finished.\nIn this step, you'll open a pull request in your own repository and then merge it yourself. It's a great way to practice the GitHub flow before working on larger projects.\nPull requests\ntab of your\nhello-world\nrepository.\nNew pull request\nExample Comparisons\nbox, select the branch you made,\nreadme-edits\n, to compare with\n(the original).\nLook over your changes in the diffs on the Compare page, make sure they're what you want to submit.\nCreate pull request\nGive your pull request a title and write a brief description of your changes. You can include emojis and drag and drop images and gifs.\nCreate pull request\nReviewing a pull request\nWhen you start collaborating with others, this is the time you'd ask for their review. This allows your collaborators to comment on, or propose changes to, your pull request before you merge the changes into the\nWe won't cover reviewing pull requests in this tutorial, but if you're interested in learning more, see\nAbout pull request reviews\n. Alternatively, try the\nGitHub Skills\n\"Reviewing pull requests\" course.\nStep 5: Merge your pull request\nIn this final step, you will merge your\nreadme-edits\nbranch into the\nbranch. After you merge your pull request, the changes on your\nreadme-edits\nbranch will be incorporated into\nSometimes, a pull request may introduce changes to code that conflict with the existing code on\n. If there are any conflicts, GitHub will alert you about the conflicting code and prevent merging until the conflicts are resolved. You can make a commit that resolves the conflicts or use comments in the pull request to discuss the conflicts with your team members.\nIn this walk-through, you should not have any conflicts, so you are ready to merge your branch into the main branch.\nAt the bottom of the pull request, click\nMerge pull request\nto merge the changes into\nConfirm merge\n. You will receive a message that the request was successfully merged and the request was closed.\nDelete branch\n. Now that your pull request is merged and your changes are on\n, you can safely delete the\nreadme-edits\nbranch. If you want to make more changes to your project, you can always create a new branch and repeat this process.\nClick back to the\ntab of your\nhello-world\nrepository to see your published changes on\nBy completing this tutorial, you've learned to create a project and make a pull request on GitHub.\nAs part of that, we've learned how to:\nCreate a repository.\nStart and manage a new branch.\nChange a file and commit those changes to GitHub.\nOpen and merge a pull request.\nTake a look at your GitHub profile and you'll see your work reflected on your contribution graph.\nIf you want to practice the skills you've learned in this tutorial again, try the\nGitHub Skills\n\"Introduction to GitHub\" course.\nIn the next tutorial,\nSetting up your profile\n, you'll learn how to personalize your profile and you'll also learn some basic Markdown syntax for writing on GitHub.\nFurther reading\nGitHub flow",
  "word_count": 1316,
  "key_terms": []
}