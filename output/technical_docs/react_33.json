{
  "metadata": {
    "title": "Tutorial: Tic-Tac-Toe",
    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
    "technology": "react",
    "category": "frameworks",
    "english_level": "B1",
    "professional_context": "development",
    "content_type": "technical_documentation",
    "last_updated": "1761765761.5964026"
  },
  "content": "Learn React\nQuick Start\nTutorial: Tic-Tac-Toe\nYou will build a small tic-tac-toe game during this tutorial. This tutorial does not assume any existing React knowledge. The techniques you’ll learn in the tutorial are fundamental to building any React app, and fully understanding it will give you a deep understanding of React.\nThis tutorial is designed for people who prefer to\nlearn by doing\nand want to quickly try making something tangible. If you prefer learning each concept step by step, start with\nDescribing the UI.\nThe tutorial is divided into several sections:\nSetup for the tutorial\nwill give you\na starting point\nto follow the tutorial.\nwill teach you\nthe fundamentals\nof React: components, props, and state.\nCompleting the game\nwill teach you\nthe most common techniques\nin React development.\nAdding time travel\nwill give you\na deeper insight\ninto the unique strengths of React.\nWhat are you building?\nIn this tutorial, you’ll build an interactive tic-tac-toe game with React.\nYou can see what it will look like when you’re finished here:\nIf the code doesn’t make sense to you yet, or if you are unfamiliar with the code’s syntax, don’t worry! The goal of this tutorial is to help you understand React and its syntax.\nWe recommend that you check out the tic-tac-toe game above before continuing with the tutorial. One of the features that you’ll notice is that there is a numbered list to the right of the game’s board. This list gives you a history of all of the moves that have occurred in the game, and it is updated as the game progresses.\nOnce you’ve played around with the finished tic-tac-toe game, keep scrolling. You’ll start with a simpler template in this tutorial. Our next step is to set you up so that you can start building the game.\nSetup for the tutorial\nIn the live code editor below, click\nin the top-right corner to open the editor in a new tab using the website CodeSandbox. CodeSandbox lets you write code in your browser and preview how your users will see the app you’ve created. The new tab should display an empty square and the starter code for this tutorial.\nYou can also follow this tutorial using your local development environment. To do this, you need to:\nIn the CodeSandbox tab you opened earlier, press the top-left corner button to open the menu, and then choose\nDownload Sandbox\nin that menu to download an archive of the files locally\nUnzip the archive, then open a terminal and\nto the directory you unzipped\nInstall the dependencies with\nnpm install\nto start a local server and follow the prompts to view the code running in a browser\nIf you get stuck, don’t let this stop you! Follow along online instead and try a local setup again later.\nNow that you’re set up, let’s get an overview of React!\nInspecting the starter code\nIn CodeSandbox you’ll see three main sections:\nsection with a list of files like\nfolder and a folder called\ncode editor\nwhere you’ll see the source code of your selected file\nsection where you’ll see how the code you’ve written will be displayed\nfile should be selected in the\nsection. The contents of that file in the\ncode editor\nsection should be displaying a square with an X in it like this:\nNow let’s have a look at the files in the starter code.\nThe code in\n. In React, a component is a piece of reusable code that represents a part of a user interface. Components are used to render, manage, and update the UI elements in your application. Let’s look at the component line by line to see what’s going on:\nThe first line defines a function called\nJavaScript keyword makes this function accessible outside of this file. The\nkeyword tells other files using your code that it’s the main function in your file.\nThe second line returns a button. The\nJavaScript keyword means whatever comes after is returned as a value to the caller of the function.\nJSX element\n. A JSX element is a combination of JavaScript code and HTML tags that describes what you’d like to display.\nclassName=\"square\"\nis a button property or\nthat tells CSS how to style the button.\nis the text displayed inside of the button and\ncloses the JSX element to indicate that any following content shouldn’t be placed inside the button.\nClick on the file labeled\nsection of CodeSandbox. This file defines the styles for your React app. The first two\nCSS selectors\n) define the style of large parts of your app while the\nselector defines the style of any component where the\nproperty is set to\n. In your code, that would match the button from your Square component in the\nClick on the file labeled\nsection of CodeSandbox. You won’t be editing this file during the tutorial but it is the bridge between the component you created in the\nfile and the web browser.\nLines 1-5 bring all the necessary pieces together:\nReact’s library to talk to web browsers (React DOM)\nthe styles for your components\nthe component you created in\nThe remainder of the file brings all the pieces together and injects the final product into\nBuilding the board\nLet’s get back to\n. This is where you’ll spend the rest of the tutorial.\nCurrently the board is only a single square, but you need nine! If you just try and copy paste your square to make two squares like this:\nYou’ll get this error:\n/src/App.js: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX Fragment\nReact components need to return a single JSX element and not multiple adjacent JSX elements like two buttons. To fix this you can use\n) to wrap multiple adjacent JSX elements like this:\nNow you should see:\nGreat! Now you just need to copy-paste a few times to add nine squares and…\nOh no! The squares are all in a single line, not in a grid like you need for our board. To fix this you’ll need to group your squares into rows with\ns and add some CSS classes. While you’re at it, you’ll give each square a number to make sure you know where each square is displayed.\nfile, update the\ncomponent to look like this:\nThe CSS defined in\nstyles the divs with the\n. Now that you’ve grouped your components into rows with the styled\ns you have your tic-tac-toe board:\nBut you now have a problem. Your component named\n, really isn’t a square anymore. Let’s fix that by changing the name to\nAt this point your code should look something like this:\nPsssst… That’s a lot to type! It’s okay to copy and paste code from this page. However, if you’re up for a little challenge, we recommend only copying code that you’ve manually typed at least once yourself.\nPassing data through props\nNext, you’ll want to change the value of a square from empty to “X” when the user clicks on the square. With how you’ve built the board so far you would need to copy-paste the code that updates the square nine times (once for each square you have)! Instead of copy-pasting, React’s component architecture allows you to create a reusable component to avoid messy, duplicated code.\nFirst, you are going to copy the line defining your first square (\n<button className=\"square\">1</button>\n) from your\ncomponent into a new\nThen you’ll update the Board component to render that\ncomponent using JSX syntax:\nNote how unlike the browser\ns, your own components\nmust start with a capital letter.\nLet’s take a look:\nOh no! You lost the numbered squares you had before. Now each square says “1”. To fix this, you will use\nto pass the value each square should have from the parent component (\n) to its child (\ncomponent to read the\nprop that you’ll pass from the\nfunction Square({ value })\nindicates the Square component can be passed a prop called\nNow you want to display that\ninside every square. Try doing it like this:\nOops, this is not what you wanted:\nYou wanted to render the JavaScript variable called\nfrom your component, not the word “value”. To “escape into JavaScript” from JSX, you need curly braces. Add curly braces around\nin JSX like so:\nFor now, you should see an empty board:\nThis is because the\ncomponent hasn’t passed the\nprop to each\ncomponent it renders yet. To fix it you’ll add the\nprop to each\ncomponent rendered by the\nNow you should see a grid of numbers again:\nYour updated code should look like this:\nMaking an interactive component\nLet’s fill the\ncomponent with an\nwhen you click it. Declare a function called\nhandleClick\ninside of the\n. Then, add\nto the props of the button JSX element returned from the\nIf you click on a square now, you should see a log saying\ntab at the bottom of the\nsection in CodeSandbox. Clicking the square more than once will log\nagain. Repeated console logs with the same message will not create more lines in the console. Instead, you will see an incrementing counter next to your first\nIf you are following this tutorial using your local development environment, you need to open your browser’s Console. For example, if you use the Chrome browser, you can view the Console with the keyboard shortcut\nShift + Ctrl + J\n(on Windows/Linux) or\nOption + ⌘ + J\n(on macOS).\nAs a next step, you want the Square component to “remember” that it got clicked, and fill it with an “X” mark. To “remember” things, components use\nReact provides a special function called\nthat you can call from your component to let it “remember” things. Let’s store the current value of the\nin state, and change it when the\nis clicked.\nat the top of the file. Remove the\nprop from the\ncomponent. Instead, add a new line at the start of the\n. Have it return a state variable called\nstores the value and\nis a function that can be used to change the value. The\nis used as the initial value for this state variable, so\nhere starts off equal to\ncomponent no longer accepts props anymore, you’ll remove the\nprop from all nine of the Square components created by the Board component:\nNow you’ll change\nto display an “X” when clicked. Replace the\nconsole.log(\"clicked!\");\nevent handler with\nsetValue('X');\ncomponent looks like this:\nBy calling this\nfunction from an\nhandler, you’re telling React to re-render that\nwhenever its\nis clicked. After the update, the\n, so you’ll see the “X” on the game board. Click on any Square, and “X” should show up:\nEach Square has its own state: the\nstored in each Square is completely independent of the others. When you call a\nfunction in a component, React automatically updates the child components inside too.\nAfter you’ve made the above changes, your code will look like this:\nReact Developer Tools\nReact DevTools let you check the props and the state of your React components. You can find the React DevTools tab at the bottom of the\nsection in CodeSandbox:\nTo inspect a particular component on the screen, use the button in the top left corner of React DevTools:\nFor local development, React DevTools is available as a\nbrowser extension. Install it, and the\ntab will appear in your browser Developer Tools for sites using React.\nCompleting the game\nBy this point, you have all the basic building blocks for your tic-tac-toe game. To have a complete game, you now need to alternate placing “X”s and “O”s on the board, and you need a way to determine a winner.\nLifting state up\nCurrently, each\ncomponent maintains a part of the game’s state. To check for a winner in a tic-tac-toe game, the\nwould need to somehow know the state of each of the 9\ncomponents.\nHow would you approach that? At first, you might guess that the\nneeds to “ask” each\n’s state. Although this approach is technically possible in React, we discourage it because the code becomes difficult to understand, susceptible to bugs, and hard to refactor. Instead, the best approach is to store the game’s state in the parent\ncomponent instead of in each\ncomponent can tell each\nwhat to display by passing a prop, like you did when you passed a number to each Square.\nTo collect data from multiple children, or to have two child components communicate with each other, declare the shared state in their parent component instead. The parent component can pass that state back down to the children via props. This keeps the child components in sync with each other and with their parent.\nLifting state into a parent component is common when React components are refactored.\nLet’s take this opportunity to try it out. Edit the\ncomponent so that it declares a state variable named\nthat defaults to an array of 9 nulls corresponding to the 9 squares:\nArray(9).fill(null)\ncreates an array with nine elements and sets each of them to\ncall around it declares a\nstate variable that’s initially set to that array. Each entry in the array corresponds to the value of a square. When you fill the board in later, the\narray will look like this:\ncomponent needs to pass the\nprop down to each\nthat it renders:\nNext, you’ll edit the\ncomponent to receive the\nprop from the Board component. This will require removing the Square component’s own stateful tracking of\nand the button’s\nAt this point you should see an empty tic-tac-toe board:\nAnd your code should look like this:\nEach Square will now receive a\nprop that will either be\nfor empty squares.\nNext, you need to change what happens when a\nis clicked. The\ncomponent now maintains which squares are filled. You’ll need to create a way for the\nto update the\n’s state. Since state is private to a component that defines it, you cannot update the\n’s state directly from\nInstead, you’ll pass down a function from the\ncomponent to the\ncomponent, and you’ll have\ncall that function when a square is clicked. You’ll start with the function that the\ncomponent will call when it is clicked. You’ll call that function\nonSquareClick\nNext, you’ll add the\nonSquareClick\nfunction to the\ncomponent’s props:\nNow you’ll connect the\nonSquareClick\nprop to a function in the\ncomponent that you’ll name\nhandleClick\n. To connect\nonSquareClick\nhandleClick\nyou’ll pass a function to the\nonSquareClick\nprop of the first\nLastly, you will define the\nhandleClick\nfunction inside the Board component to update the\narray holding your board’s state:\nhandleClick\nfunction creates a copy of the\nnextSquares\n) with the JavaScript\nArray method. Then,\nhandleClick\nupdates the\nnextSquares\narray to add\nto the first (\nindex) square.\nCalling the\nfunction lets React know the state of the component has changed. This will trigger a re-render of the components that use the\n) as well as its child components (the\ncomponents that make up the board).\nJavaScript supports\nwhich means an inner function (e.g.\nhandleClick\n) has access to variables and functions defined in an outer function (e.g.\nhandleClick\nfunction can read the\nstate and call the\nmethod because they are both defined inside of the\nNow you can add X’s to the board…  but only to the upper left square. Your\nhandleClick\nfunction is hardcoded to update the index for the upper left square (\n). Let’s update\nhandleClick\nto be able to update any square. Add an argument\nhandleClick\nfunction that takes the index of the square to update:\nNext, you will need to pass that\nhandleClick\n. You could try to set the\nonSquareClick\nprop of square to be\nhandleClick(0)\ndirectly in the JSX like this, but it won’t work:\nonSquareClick\nhandleClick\nHere is why this doesn’t work. The\nhandleClick(0)\ncall will be a part of rendering the board component. Because\nhandleClick(0)\nalters the state of the board component by calling\n, your entire board component will be re-rendered again. But this runs\nhandleClick(0)\nagain, leading to an infinite loop:\nToo many re-renders. React limits the number of renders to prevent an infinite loop.\nWhy didn’t this problem happen earlier?\nWhen you were passing\nonSquareClick={handleClick}\n, you were passing the\nhandleClick\nfunction down as a prop. You were not calling it! But now you are\nthat function right away—notice the parentheses in\nhandleClick(0)\n—and that’s why it runs too early. You don’t\nhandleClick\nuntil the user clicks!\nYou could fix this by creating a function like\nhandleFirstSquareClick\nhandleClick(0)\n, a function like\nhandleSecondSquareClick\nhandleClick(1)\n, and so on. You would pass (rather than call) these functions down as props like\nonSquareClick={handleFirstSquareClick}\n. This would solve the infinite loop.\nHowever, defining nine different functions and giving each of them a name is too verbose. Instead, let’s do this:\nNotice the new\nsyntax. Here,\n() => handleClick(0)\narrow function,\nwhich is a shorter way to define functions. When the square is clicked, the code after the\n“arrow” will run, calling\nhandleClick(0)\nNow you need to update the other eight squares to call\nhandleClick\nfrom the arrow functions you pass. Make sure that the argument for each call of the\nhandleClick\ncorresponds to the index of the correct square:\nNow you can again add X’s to any square on the board by clicking on them:\nBut this time all the state management is handled by the\nThis is what your code should look like:\nNow that your state handling is in the\ncomponent, the parent\ncomponent passes props to the child\ncomponents so that they can be displayed correctly. When clicking on a\n, the child\ncomponent now asks the parent\ncomponent to update the state of the board. When the\n’s state changes, both the\ncomponent and every child\nre-renders automatically. Keeping the state of all squares in the\ncomponent will allow it to determine the winner in the future.\nLet’s recap what happens when a user clicks the top left square on your board to add an\nClicking on the upper left square runs the function that the\nreceived as its\nprop from the\ncomponent received that function as its\nonSquareClick\nprop from the\ncomponent defined that function directly in the JSX. It calls\nhandleClick\nwith an argument of\nhandleClick\nuses the argument (\n) to update the first element of the\nstate of the\ncomponent was updated, so the\nand all of its children re-render. This causes the\nprop of the\ncomponent with index\nto change from\nIn the end the user sees that the upper left square has changed from empty to having an\nafter clicking it.\nattribute has a special meaning to React because it is a built-in component. For custom components like Square, the naming is up to you. You could give any name to the\nonSquareClick\nhandleClick\nfunction, and the code would work the same. In React, it’s conventional to use\nonSomething\nnames for props which represent events and\nhandleSomething\nfor the function definitions which handle those events.\nWhy immutability is important\nNote how in\nhandleClick\nto create a copy of the\narray instead of modifying the existing array. To explain why, we need to discuss immutability and why immutability is important to learn.\nThere are generally two approaches to changing data. The first approach is to\nthe data by directly changing the data’s values. The second approach is to replace the data with a new copy which has the desired changes. Here is what it would look like if you mutated the\nAnd here is what it would look like if you changed data without mutating the\nThe result is the same but by not mutating (changing the underlying data) directly, you gain several benefits.\nImmutability makes complex features much easier to implement. Later in this tutorial, you will implement a “time travel” feature that lets you review the game’s history and “jump back” to past moves. This functionality isn’t specific to games—an ability to undo and redo certain actions is a common requirement for apps. Avoiding direct data mutation lets you keep previous versions of the data intact, and reuse them later.\nThere is also another benefit of immutability. By default, all child components re-render automatically when the state of a parent component changes. This includes even the child components that weren’t affected by the change. Although re-rendering is not by itself noticeable to the user (you shouldn’t actively try to avoid it!), you might want to skip re-rendering a part of the tree that clearly wasn’t affected by it for performance reasons. Immutability makes it very cheap for components to compare whether their data has changed or not. You can learn more about how React chooses when to re-render a component in\nAPI reference\nTaking turns\nIt’s now time to fix a major defect in this tic-tac-toe game: the “O”s cannot be marked on the board.\nYou’ll set the first move to be “X” by default. Let’s keep track of this by adding another piece of state to the Board component:\nEach time a player moves,\n(a boolean) will be flipped to determine which player goes next and the game’s state will be saved. You’ll update the\nhandleClick\nfunction to flip the value of\nNow, as you click on different squares, they will alternate between\n, as they should!\nBut wait, there’s a problem. Try clicking on the same square multiple times:\nis overwritten by an\n! While this would add a very interesting twist to the game, we’re going to stick to the original rules for now.\nWhen you mark a square with an\nyou aren’t first checking to see if the square already has an\nvalue. You can fix this by\nreturning early\n. You’ll check to see if the square already has an\n. If the square is already filled, you will\nhandleClick\nfunction early—before it tries to update the board state.\nNow you can only add\n’s to empty squares! Here is what your code should look like at this point:\nDeclaring a winner\nNow that the players can take turns, you’ll want to show when the game is won and there are no more turns to make. To do this you’ll add a helper function called\ncalculateWinner\nthat takes an array of 9 squares, checks for a winner and returns\nas appropriate. Don’t worry too much about the\ncalculateWinner\nfunction; it’s not specific to React:\nIt does not matter whether you define\ncalculateWinner\nbefore or after the\n. Let’s put it at the end so that you don’t have to scroll past it every time you edit your components.\nYou will call\ncalculateWinner(squares)\ncomponent’s\nhandleClick\nfunction to check if a player has won. You can perform this check at the same time you check if a user has clicked a square that already has an\n. We’d like to return early in both cases:\nTo let the players know when the game is over, you can display text such as “Winner: X” or “Winner: O”. To do that you’ll add a\nsection to the\ncomponent. The status will display the winner if the game is over and if the game is ongoing you’ll display which player’s turn is next:\nCongratulations! You now have a working tic-tac-toe game. And you’ve just learned the basics of React too. So\nare the real winner here. Here is what the code should look like:\nAdding time travel\nAs a final exercise, let’s make it possible to “go back in time” to the previous moves in the game.\nStoring a history of moves\nIf you mutated the\narray, implementing time travel would be very difficult.\nHowever, you used\nto create a new copy of the\narray after every move, and treated it as immutable. This will allow you to store every past version of the\narray, and navigate between the turns that have already happened.\nYou’ll store the past\narrays in another array called\n, which you’ll store as a new state variable. The\narray represents all board states, from the first to the last move, and has a shape like this:\nLifting state up, again\nYou will now write a new top-level component called\nto display a list of past moves. That’s where you will place the\nstate that contains the entire game history.\nPlacing the\nstate into the\ncomponent will let you remove the\nstate from its child\ncomponent. Just like you “lifted state up” from the\ncomponent into the\ncomponent, you will now lift it up from the\ninto the top-level\ncomponent. This gives the\ncomponent full control over the\n’s data and lets it instruct the\nto render previous turns from the\nFirst, add a\ncomponent with\nexport default\n. Have it render the\ncomponent and some markup:\nNote that you are removing the\nexport default\nkeywords before the\nfunction Board() {\ndeclaration and adding them before the\nfunction Game() {\ndeclaration. This tells your\nfile to use the\ncomponent as the top-level component instead of your\ncomponent. The additional\ns returned by the\ncomponent are making room for the game information you’ll add to the board later.\nAdd some state to the\ncomponent to track which player is next and the history of moves:\n[Array(9).fill(null)]\nis an array with a single item, which itself is an array of 9\nTo render the squares for the current move, you’ll want to read the last squares array from the\n. You don’t need\nfor this—you already have enough information to calculate it during rendering:\nNext, create a\nfunction inside the\ncomponent that will be called by the\ncomponent to update the game. Pass\ncurrentSquares\nas props to the\nLet’s make the\ncomponent fully controlled by the props it receives. Change the\ncomponent to take three props:\n, and a new\nfunction that\ncan call with the updated squares array when a player makes a move. Next, remove the first two lines of the\nfunction that call\nhandleClick\nNow replace the\nhandleClick\ncomponent with a single call to your new\nfunction so the\ncomponent can update the\nwhen the user clicks a square:\ncomponent is fully controlled by the props passed to it by the\ncomponent. You need to implement the\nfunction in the\ncomponent to get the game working again.\nWhat should\ndo when called? Remember that Board used to call\nwith an updated array; now it passes the updated\nfunction needs to update\n’s state to trigger a re-render, but you don’t have a\nfunction that you can call any more—you’re now using the\nstate variable to store this information. You’ll want to update\nby appending the updated\narray as a new history entry. You also want to toggle\n, just as Board used to do:\n[...history, nextSquares]\ncreates a new array that contains all the items in\n, followed by\nnextSquares\n. (You can read the\nspread syntax\nas “enumerate all the items in\nFor example, if\n[[null,null,null], [\"X\",null,null]]\nnextSquares\n[\"X\",null,\"O\"]\n, then the new\n[...history, nextSquares]\narray will be\n[[null,null,null], [\"X\",null,null], [\"X\",null,\"O\"]]\nAt this point, you’ve moved the state to live in the\ncomponent, and the UI should be fully working, just as it was before the refactor. Here is what the code should look like at this point:\nShowing the past moves\nSince you are recording the tic-tac-toe game’s history, you can now display a list of past moves to the player.\nReact elements like\nare regular JavaScript objects; you can pass them around in your application. To render multiple items in React, you can use an array of React elements.\nYou already have an array of\nmoves in state, so now you need to transform it to an array of React elements. In JavaScript, to transform one array into another, you can use the\nto transform your\nof moves into React elements representing buttons on the screen, and display a list of buttons to “jump” to past moves. Let’s\nin the Game component:\nYou can see what your code should look like below. Note that you should see an error in the developer tools console that says:\nWarning: Each child in an array or iterator should have a unique “key” prop. Check the render method of `Game`.\nYou’ll fix this error in the next section.\nAs you iterate through the\narray inside the function you passed to\nargument goes through each element of\nargument goes through each array index:\n, …. (In most cases, you’d need the actual array elements, but to render a list of moves you will only need indexes.)\nFor each move in the tic-tac-toe game’s history, you create a list item\nwhich contains a button\n. The button has an\nhandler which calls a function called\n(that you haven’t implemented yet).\nFor now, you should see a list of the moves that occurred in the game and an error in the developer tools console. Let’s discuss what the “key” error means.\nPicking a key\nWhen you render a list, React stores some information about each rendered list item. When you update a list, React needs to determine what has changed. You could have added, removed, re-arranged, or updated the list’s items.\nImagine transitioning from\nAlexa: 7 tasks left\nBen: 5 tasks left\nBen: 9 tasks left\nClaudia: 8 tasks left\nAlexa: 5 tasks left\nIn addition to the updated counts, a human reading this would probably say that you swapped Alexa and Ben’s ordering and inserted Claudia between Alexa and Ben. However, React is a computer program and does not know what you intended, so you need to specify a\nproperty for each list item to differentiate each list item from its siblings. If your data was from a database, Alexa, Ben, and Claudia’s database IDs could be used as keys.\nWhen a list is re-rendered, React takes each list item’s key and searches the previous list’s items for a matching key. If the current list has a key that didn’t exist before, React creates a component. If the current list is missing a key that existed in the previous list, React destroys the previous component. If two keys match, the corresponding component is moved.\nKeys tell React about the identity of each component, which allows React to maintain state between re-renders. If a component’s key changes, the component will be destroyed and re-created with a new state.\nis a special and reserved property in React. When an element is created, React extracts the\nproperty and stores the key directly on the returned element. Even though\nmay look like it is passed as props, React automatically uses\nto decide which components to update. There’s no way for a component to ask what\nits parent specified.\nIt’s strongly recommended that you assign proper keys whenever you build dynamic lists.\nIf you don’t have an appropriate key, you may want to consider restructuring your data so that you do.\nIf no key is specified, React will report an error and use the array index as a key by default. Using the array index as a key is problematic when trying to re-order a list’s items or inserting/removing list items. Explicitly passing\nsilences the error but has the same problems as array indices and is not recommended in most cases.\nKeys do not need to be globally unique; they only need to be unique between components and their siblings.\nImplementing time travel\nIn the tic-tac-toe game’s history, each past move has a unique ID associated with it: it’s the sequential number of the move. Moves will never be re-ordered, deleted, or inserted in the middle, so it’s safe to use the move index as a key.\nfunction, you can add the key as\n<li key={move}>\n, and if you reload the rendered game, React’s “key” error should disappear:\nBefore you can implement\n, you need the\ncomponent to keep track of which step the user is currently viewing. To do this, define a new state variable called\ncurrentMove\n, defaulting to\nNext, update the\nfunction inside\nto update that\ncurrentMove\n. You’ll also set\nif the number that you’re changing\ncurrentMove\nto is even.\nYou will now make two changes to the\nfunction which is called when you click on a square.\nIf you “go back in time” and then make a new move from that point, you only want to keep the history up to that point. Instead of adding\nnextSquares\nafter all items (\nspread syntax) in\n, you’ll add it after all items in\nhistory.slice(0, currentMove + 1)\nso that you’re only keeping that portion of the old history.\nEach time a move is made, you need to update\ncurrentMove\nto point to the latest history entry.\nFinally, you will modify the\ncomponent to render the currently selected move, instead of always rendering the final move:\nIf you click on any step in the game’s history, the tic-tac-toe board should immediately update to show what the board looked like after that step occurred.\nFinal cleanup\nIf you look at the code very closely, you may notice that\nxIsNext === true\ncurrentMove\nis even and\nxIsNext === false\ncurrentMove\nis odd. In other words, if you know the value of\ncurrentMove\n, then you can always figure out what\nThere’s no reason for you to store both of these in state. In fact, always try to avoid redundant state. Simplifying what you store in state reduces bugs and makes your code easier to understand. Change\nso that it doesn’t store\nas a separate state variable and instead figures it out based on the\ncurrentMove\nYou no longer need the\nstate declaration or the calls to\n. Now, there’s no chance for\nto get out of sync with\ncurrentMove\n, even if you make a mistake while coding the components.\nWrapping up\nCongratulations! You’ve created a tic-tac-toe game that:\nLets you play tic-tac-toe,\nIndicates when a player has won the game,\nStores a game’s history as a game progresses,\nAllows players to review a game’s history and see previous versions of a game’s board.\nNice work! We hope you now feel like you have a decent grasp of how React works.\nCheck out the final result here:\nIf you have extra time or want to practice your new React skills, here are some ideas for improvements that you could make to the tic-tac-toe game, listed in order of increasing difficulty:\nFor the current move only, show “You are at move #…” instead of a button.\nto use two loops to make the squares instead of hardcoding them.\nAdd a toggle button that lets you sort the moves in either ascending or descending order.\nWhen someone wins, highlight the three squares that caused the win (and when no one wins, display a message about the result being a draw).\nDisplay the location for each move in the format (row, col) in the move history list.\nThroughout this tutorial, you’ve touched on React concepts including elements, components, props, and state. Now that you’ve seen how these concepts work when building a game, check out\nThinking in React\nto see how the same React concepts work when building an app’s UI.\nQuick Start\nThinking in React",
  "word_count": 5876,
  "key_terms": [
    "return",
    "function",
    "method",
    "variable",
    "export",
    "database",
    "api"
  ]
}