{
  "metadata": {
    "title": "Changing a commit message",
    "url": "https://docs.github.com/en/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/changing-a-commit-message",
    "technology": "github",
    "category": "tools_platforms",
    "english_level": "B1",
    "professional_context": "debugging",
    "content_type": "technical_documentation",
    "last_updated": "1761766071.8567872"
  },
  "content": "Changing a commit message\nIf a commit message contains unclear, incorrect, or sensitive information, you can amend it locally and push a new commit with a new message to GitHub. You can also change a commit message to add missing information.\nIn this article\nRewriting the most recent commit message\nYou can change the most recent commit message using the\ngit commit --amend\nIn Git, the text of the commit message is part of the commit. Changing the commit message will change the commit IDâ€”i.e., the SHA1 checksum that names the commit. Effectively, you are creating a new commit that replaces the old one.\nCommit has not been pushed online\nIf the commit only exists in your local repository and has not been pushed to GitHub.com, you can amend the commit message with the\ngit commit --amend\nOn the command line, navigate to the repository that contains the commit you want to amend.\ngit commit --amend\nIn your text editor, edit the commit message, and save the commit.\nYou can add a co-author by adding a trailer to the commit. For more information, see\nCreating a commit with multiple authors\nYou can create commits on behalf of your organization by adding a trailer to the commit. For more information, see\nCreating a commit on behalf of an organization\nThe new commit and message will appear on GitHub.com the next time you push.\nYou can change the default text editor for Git by changing the\ncore.editor\nsetting. For more information, see\nBasic Client Configuration\nin the Git manual.\nAmending older or multiple commit messages\nIf you have already pushed the commit to GitHub.com, you will have to force push a commit with an amended message.\nWe strongly discourage force pushing, since this changes the history of your repository. If you force push, people who have already cloned your repository will have to manually fix their local history. For more information, see\nRecovering from upstream rebase\nin the Git manual.\nChanging the message of the most recently pushed commit\nsteps above\nto amend the commit message.\npush --force-with-lease\ncommand to force push over the old commit.\ngit push --force-with-lease origin EXAMPLE-BRANCH\nChanging the message of older or multiple commit messages\nIf you need to amend the message for multiple commits or an older commit, you can use interactive rebase, then force push to change the commit history.\nOn the command line, navigate to the repository that contains the commit you want to amend.\ngit rebase -i HEAD~n\ncommand to display a list of the last\ncommits in your default text editor.\nDisplays a list of the last 3 commits on the current branch\ngit rebase -i HEAD~3\nThe list will look similar to the following:\nbefore each commit message you want to change.\nSave and close the commit list file.\nIn each resulting commit file, type the new commit message, save the file, and close it.\nWhen you're ready to push your changes to GitHub, use the push --force command to force push over the old commit.\ngit push --force origin EXAMPLE-BRANCH\nFor more information on interactive rebase, see\nInteractive mode\nin the Git manual.\nAs before, amending the commit message will result in a new commit with a new ID. However, in this case, every commit that follows the amended commit will also get a new ID because each commit also contains the ID of its parent.\nIf you have included sensitive information in a commit message, force pushing a commit with an amended commit may not remove the original commit from GitHub. The old commit will not be a part of a subsequent clone; however, it may still be cached on GitHub and accessible via the commit ID. You must contact us through the\nGitHub Support portal\nwith the old commit ID to have it purged from the remote repository.\nFurther reading\nSigning commits",
  "word_count": 644,
  "key_terms": [
    "configuration"
  ]
}