{
  "metadata": {
    "title": "Creating a package.json file",
    "url": "https://docs.npmjs.com/creating-a-package-json-file",
    "technology": "npm",
    "category": "tools_platforms",
    "english_level": "B1",
    "professional_context": "deployment",
    "content_type": "technical_documentation",
    "last_updated": "1761766139.1248002"
  },
  "content": "Creating a package.json file\nSee Details\nTable of contents\nYou can add a\npackage.json\nfile to your package to make it easy for others to manage and install. Packages published to the registry must contain a\npackage.json\npackage.json\nlists the packages your project depends on\nspecifies versions of a package that your project can use using\nsemantic versioning rules\nmakes your build reproducible, and therefore easier to share with other developers\nTo make your package easier to find on the npm website, we recommend including a custom\ndescription\npackage.json\npackage.json\npackage.json\nfile must contain\nfield contains your package's name and\nbe lowercase\nany spaces. May contain\nunderscores\nfield must be in the form\nand follow the\nsemantic versioning guidelines\nAuthor field\nIf you want inclusive package author information, in the\nfield use the following format (email and website are both optional):\nYour Name <email@example.com> (https://example.com)\nCreating a new\npackage.json\nYou can create a\npackage.json\nfile by running a CLI questionnaire or creating a default\npackage.json\nRunning a CLI questionnaire\nTo create a\npackage.json\nfile with values that you supply, use the\nOn the command line, navigate to the root directory of your package.\ncd /path/to/package\nRun the following command:\nAnswer the questions in the command line questionnaire.\nCustomizing the\npackage.json\nquestionnaire\nIf you expect to create many\npackage.json\nfiles, you can customize the questions asked and fields created during the\nprocess so all the\npackage.json\nfiles contain a standard set of information.\nIn your home directory, create a file called\n.npm-init.js\nTo add custom questions, using a text editor, add questions with the\nmodule.exports = prompt(\"what's your favorite flavor of ice cream, buddy?\", \"I LIKE THEM ALL\");\nTo add custom fields, using a text editor, add desired fields to the\n.npm-init.js\nTo learn more about creating advanced\ncustomizations, see the\ninit-package-json GitHub repository\nCreating a default\npackage.json\nTo create a default\npackage.json\nusing information extracted from the current directory, use the\ncommand with the\nflag. For a list of default values, see \"\nDefault values extracted from the current directory\nOn the command line, navigate to the root directory of your package.\ncd /path/to/package\nRun the following command:\nnpm init --yes\nDefault values extracted from the current directory\n: the current directory name\ndescription\n: info about the package, or an empty string\n: by default creates an empty\n: information from the current directory, if present\n: information from the current directory, if present\nSetting config options for the init command\nYou can set default config options for the\ncommand. For example, to set the default author email, author name, and license, on the command line, run the following commands:\nEdit this page on GitHub\ncontributors\nLast edited by\nOctober 15, 2024",
  "word_count": 453,
  "key_terms": []
}