{
  "metadata": {
    "title": "Models¶",
    "url": "https://docs.djangoproject.com/en/stable/topics/db/models/",
    "technology": "django",
    "category": "frameworks",
    "english_level": "B1",
    "professional_context": "development",
    "content_type": "technical_documentation",
    "last_updated": "1761765786.653906"
  },
  "content": "A model is the single, definitive source of information about your data. It\ncontains the essential fields and behaviors of the data you’re storing.\nGenerally, each model maps to a single database table.\nThe basics:\nEach model is a Python class that subclasses\ndjango.db.models.Model\nEach attribute of the model represents a database field.\nWith all of this, Django gives you an automatically-generated\ndatabase-access API; see\nMaking queries\nQuick example\nThis example model defines a\n, which has a\nof the model. Each field is\nspecified as a class attribute, and each attribute maps to a database column.\nmodel would create a database table like this:\nSome technical notes:\nThe name of the table,\nmyapp_person\n, is automatically derived from\nsome model metadata but can be overridden. See\nTable names\nfield is added automatically, but this behavior can be\noverridden. See\nAutomatic primary key fields\nSQL in this example is formatted using PostgreSQL\nsyntax, but it’s worth noting Django uses SQL tailored to the database\nbackend specified in your\nsettings file\nUsing models\nOnce you have defined your models, you need to tell Django you’re going to\nthose models. Do this by editing your settings file and changing the\nsetting to add the name of the module that contains\nFor example, if the models for your application live in the module\nmyapp.models\n(the package structure that is created for an\napplication by the\nshould read, in part:\nWhen you add new apps to\n, be sure to run\n, optionally making migrations\nfor them first with\nmakemigrations\nThe most important part of a model – and the only required part of a model –\nis the list of database fields it defines. Fields are specified by class\nattributes. Be careful not to choose field names that conflict with the\nField types\nEach field in your model should be an instance of the appropriate\nclass. Django uses the field class types to\ndetermine a few things:\nThe column type, which tells the database what kind of data to store (e.g.\nThe default HTML\nto use when rendering a form\nfield (e.g.\ntype=\"text\">\nThe minimal validation requirements, used in Django’s admin and in\nautomatically-generated forms.\nDjango ships with dozens of built-in field types; you can find the complete list\nmodel field reference\n. You can easily write\nyour own fields if Django’s built-in ones don’t do the trick; see\nHow to create custom model fields\nField options\nEach field takes a certain set of field-specific arguments (documented in the\nmodel field reference\n). For example,\n(and its subclasses) require a\nargument which specifies the size\ndatabase field used to store the data.\nThere’s also a set of common arguments available to all field types. All are\noptional. They’re fully explained in the\n, but here’s a quick summary of the most often-used\n, Django will store empty values as\nin the database.\n, the field is allowed to be blank. Default is\nNote that this is different than\nis purely database-related, whereas\nis validation-related. If a field has\n, form validation will\nallow entry of an empty value. If a field has\nblank=False\n, the field will be required.\nof 2-value tuples, a\nenumeration type\n, or a callable (that\nexpects no arguments and returns any of the previous formats), to use as\nchoices for this field. If this is given, the default form widget will be a\nselect box instead of the standard text field and will limit choices to the\nchoices given.\nA choices list looks like this:\nA new migration is created each time the order of\nThe first element in each tuple is the value that will be stored in the\ndatabase. The second element is displayed by the field’s form widget.\nGiven a model instance, the display value for a field with\nbe accessed using the\nget_FOO_display()\nmethod. For example:\nYou can also use enumeration classes to define\nin a concise\nFurther examples are available in the\nmodel field reference\nThe default value for the field. This can be a value or a callable\nobject. If callable it will be called every time a new object is\nThe database-computed default value for the field. This can be a literal\nvalue or a database function.\nField.default\ntake precedence when creating instances in Python code.\nstill be set at the database level and will be used when inserting rows\noutside of the ORM or when adding a new field in a migration.\nExtra “help” text to be displayed with the form widget. It’s useful for\ndocumentation even if your field isn’t used on a form.\nprimary_key\n, this field is the primary key for the model.\nIf you don’t specify\nprimary_key=True\nany fields in your model, Django will automatically add a field to hold\nthe primary key, so you don’t need to set\nprimary_key=True\non any of your fields\nunless you want to override the default primary-key behavior. For more,\nAutomatic primary key fields\nThe primary key field is read-only. If you change the value of the primary\nkey on an existing object and then save it, a new object will be created\nalongside the old one. For example:\n, this field must be unique throughout the table.\nAgain, these are just short descriptions of the most common field options. Full\ndetails can be found in the\ncommon model field option reference\nAutomatic primary key fields\nBy default, Django gives each model an auto-incrementing primary key with the\ntype specified per app in\nAppConfig.default_auto_field\nor globally in the\nsetting. For example:\nBigAutoField\nprimary_key\nIf you’d like to specify a custom primary key, specify\nprimary_key=True\non one of your fields. If Django\nsees you’ve explicitly set\nField.primary_key\n, it won’t add the automatic\nEach model requires exactly one field to have\nprimary_key=True\n(either explicitly declared or automatically added).\nVerbose field names\nEach field type, except for\nManyToManyField\nOneToOneField\n, takes an optional first positional\nargument – a verbose name. If the verbose name isn’t given, Django will\nautomatically create it using the field’s attribute name, converting underscores\nIn this example, the verbose name is\n\"person's first name\"\nIn this example, the verbose name is\nManyToManyField\nOneToOneField\nrequire the first argument to be a\nmodel class, so use the\nverbose_name\nkeyword argument:\nThe convention is not to capitalize the first letter of the\nverbose_name\n. Django will automatically capitalize the first\nletter where it needs to.\nRelationships\nClearly, the power of relational databases lies in relating tables to each\nother. Django offers ways to define the three most common types of database\nrelationships: many-to-one, many-to-many and one-to-one.\nMany-to-one relationships\nTo define a many-to-one relationship, use\ndjango.db.models.ForeignKey\nYou use it just like any other\nincluding it as a class attribute of your model.\nrequires a positional argument: the class\nto which the model is related.\nFor example, if a\nmodel has a\nManufacturer\n– that is, a\nManufacturer\nmakes multiple cars but each\nonly has one\nManufacturer\n– use the following definitions:\nYou can also create\nrecursive relationships\nobject with a many-to-one relationship to itself) and\nrelationships to\nmodels not yet defined\nthe model field\nfor details.\nIt’s suggested, but not required, that the name of a\nmanufacturer\nin the example\nabove) be the name of the model, lowercase. You can call the field whatever you\nwant. For example:\nfields accept a number of extra\narguments which are explained in\nthe model field reference\n. These options help define how the relationship\nshould work; all are optional.\nFor details on accessing backwards-related objects, see the\nFollowing relationships backward example\nFor sample code, see the\nMany-to-one relationship model example\nMany-to-many relationships\nTo define a many-to-many relationship, use\nManyToManyField\n. You use it just like any other\ntype: by including it as a class attribute of\nyour model.\nManyToManyField\nrequires a positional argument: the\nclass to which the model is related.\nFor example, if a\nhas multiple\nobjects – that is, a\ncan be on multiple pizzas and each\nhas multiple toppings\n– here’s how you’d represent that:\n, you can also create\nrecursive relationships\n(an object with a\nmany-to-many relationship to itself) and\nrelationships to models not yet\nIt’s suggested, but not required, that the name of a\nManyToManyField\nin the example above)\nbe a plural describing the set of related model objects.\nIt doesn’t matter which model has the\nManyToManyField\n, but you should only put it in one\nof the models – not both.\nManyToManyField\ninstances should go in\nthe object that’s going to be edited on a form. In the above example,\n(rather than\nManyToManyField\n) because it’s more natural to think\nabout a pizza having toppings than a topping being on multiple pizzas. The way\nit’s set up above, the\nform would let users select the toppings.\nMany-to-many relationship model example\nfor a full example.\nManyToManyField\nfields also accept a number of\nextra arguments which are explained in\nthe model field reference\n. These options help define how the relationship\nshould work; all are optional.\nExtra fields on many-to-many relationships\nWhen you’re only dealing with many-to-many relationships such as mixing and\nmatching pizzas and toppings, a standard\nManyToManyField\nis all you need. However, sometimes\nyou may need to associate data with the relationship between two models.\nFor example, consider the case of an application tracking the musical groups\nwhich musicians belong to. There is a many-to-many relationship between a person\nand the groups of which they are a member, so you could use a\nManyToManyField\nto represent this relationship.\nHowever, there is a lot of detail about the membership that you might want to\ncollect, such as the date at which the person joined the group.\nFor these situations, Django allows you to specify the model that will be used\nto govern the many-to-many relationship. You can then put extra fields on the\nintermediate model. The intermediate model is associated with the\nManyToManyField\nargument to point to the model\nthat will act as an intermediary. For our musician example, the code would look\nsomething like this:\nWhen you set up the intermediary model, you explicitly specify foreign\nkeys to the models that are involved in the many-to-many relationship. This\nexplicit declaration defines how the two models are related.\nIf you don’t want multiple associations between the same instances, add a\nUniqueConstraint\nincluding the\nfields. Django’s automatically generated many-to-many tables include such a\nconstraint.\nThere are a few restrictions on the intermediate model:\nYour intermediate model must contain one - and\none - foreign key\nto the source model (this would be\nin our example), or you must\nexplicitly specify the foreign keys Django should use for the relationship\nManyToManyField.through_fields\nIf you have more than one foreign key and\nthrough_fields\nspecified, a validation error will be raised. A similar restriction applies\nto the foreign key to the target model (this would be\nFor a model which has a many-to-many relationship to itself through an\nintermediary model, two foreign keys to the same model are permitted, but\nthey will be treated as the two (different) sides of the many-to-many\nrelationship. If\nthrough_fields\nis not specified,\nthe first foreign key will be taken to represent the source side of the\nManyToManyField\n, while the second will be taken to represent the target\nside. If there are\nthan two foreign keys though, you must specify\nthrough_fields\nto explicitly indicate which foreign\nkeys to use, otherwise a validation error will be raised.\nNow that you have set up your\nManyToManyField\nyour intermediary model (\n, in this case), you’re ready to start\ncreating some many-to-many relationships. You do this by creating instances of\nthe intermediate model:\nYou can also use\nrelationships, as long as you specify\nthrough_defaults\nfor any required\nYou may prefer to create instances of the intermediate model directly.\nIf the custom through table defined by the intermediate model does not enforce\nuniqueness on the\npair, allowing multiple values, the\nremove all intermediate model instances:\nmethod can be used to remove all many-to-many relationships for an instance:\nOnce you have established the many-to-many relationships, you can issue\nqueries. Just as with normal many-to-many relationships, you can query using\nthe attributes of the many-to-many-related model:\nAs you are using an intermediate model, you can also query on its attributes:\nIf you need to access a membership’s information you may do so by directly\nquerying the\nAnother way to access the same information is by querying the\nmany-to-many reverse relationship\nOne-to-one relationships\nTo define a one-to-one relationship, use\nOneToOneField\n. You use it just like any other\ntype: by including it as a class attribute of your model.\nThis is most useful on the primary key of an object when that object “extends”\nanother object in some way.\nOneToOneField\nrequires a positional argument: the\nclass to which the model is related.\nFor example, if you were building a database of “places”, you would\nbuild pretty standard stuff such as address, phone number, etc. in the\ndatabase. Then, if you wanted to build a database of restaurants on\ntop of the places, instead of repeating yourself and replicating those\nfields in the\nmodel, you could make\nOneToOneField\nrestaurant “is a” place; in fact, to handle this you’d typically use\ninheritance\n, which involves an implicit\none-to-one relation).\nrecursive relationship\ncan be defined and\nreferences to as-yet\nundefined models\ncan be made.\nOne-to-one relationship model example\nfor a full example.\nOneToOneField\nfields also accept an optional\nparent_link\nOneToOneField\nclasses used to automatically become\nthe primary key on a model. This is no longer true (although you can manually\npass in the\nprimary_key\nargument if you like).\nThus, it’s now possible to have multiple fields of type\nOneToOneField\non a single model.\nModels across files\nIt’s perfectly OK to relate a model to one from another app. To do this, import\nthe related model at the top of the file where your model is defined. Then,\nrefer to the other model class wherever needed. For example:\nAlternatively, you can use a lazy reference to the related model, specified as\na string in the format\n\"app_label.ModelName\"\n. This does not require the\nrelated model to be imported. For example:\nlazy relationships\nfor more details.\nField name restrictions\nDjango places some restrictions on model field names:\nA field name cannot be a Python reserved word, because that would result\nin a Python syntax error. For example:\nclass Example(models.Model):\npass = models.IntegerField() # 'pass' is a reserved word!\nA field name cannot contain more than one underscore in a row, due to\nthe way Django’s query lookup syntax works. For example:\nA field name cannot end with an underscore, for similar reasons.\nA field name cannot be\n, as this would override the check\nframework’s\nModel.check()\nThese limitations can be worked around, though, because your field name doesn’t\nnecessarily have to match your database column name. See the\nSQL reserved words, such as\nmodel field names, because Django escapes all database table names and column\nnames in every underlying SQL query. It uses the quoting syntax of your\nparticular database engine.\nCustom field types\nIf one of the existing model fields cannot be used to fit your purposes, or if\nyou wish to take advantage of some less common database column types, you can\ncreate your own field class. Full coverage of creating your own fields is\nprovided in\nHow to create custom model fields\nGive your model metadata by using an inner\nModel metadata is “anything that’s not a field”, such as ordering options\n), database table name (\nhuman-readable singular and plural names (\nverbose_name\nverbose_name_plural\n). None are required, and adding\nto a model is completely optional.\nA complete list of all possible\noptions can be found in the\noption reference\nModel attributes\nThe most important attribute of a model is the\n. It’s the interface through which\ndatabase query operations are provided to Django models and is used to\nretrieve the instances\nfrom the database. If no\nis defined, the default name is\n. Managers are only accessible via\nmodel classes, not the model instances.\nModel methods\nDefine custom methods on a model to add custom “row-level” functionality to your\nobjects. Whereas\nmethods are intended to do\n“table-wide” things, model methods should act on a particular model instance.\nThis is a valuable technique for keeping business logic in one place – the\nFor example, this model has a few custom methods:\nThe last method in this example is a\nmodel instance reference\nhas a complete list\nmethods automatically given to each model\nYou can override most of these – see\noverriding predefined model methods\nbelow – but there are a couple that you’ll almost always want to define:\nA Python “magic method” that returns a string representation of any\nobject. This is what Python and Django will use whenever a model\ninstance needs to be coerced and displayed as a plain string. Most\nnotably, this happens when you display an object in an interactive\nconsole or in the admin.\nYou’ll always want to define this method; the default isn’t very helpful\nget_absolute_url()\nThis tells Django how to calculate the URL for an object. Django uses\nthis in its admin interface, and any time it needs to figure out a URL\nfor an object.\nAny object that has a URL that uniquely identifies it should define this\nOverriding predefined model methods\nThere’s another set of\nmodel methods\nencapsulate a bunch of database behavior that you’ll want to customize. In\nparticular you’ll often want to change the way\nYou’re free to override these methods (and any other model method) to alter\nA classic use-case for overriding the built-in methods is if you want something\nto happen whenever you save an object. For example (see\nfor documentation of the parameters it accepts):\nYou can also prevent saving:\nIt’s important to remember to call the superclass method – that’s\nsuper().save(**kwargs)\nbusiness – to ensure that the object still\ngets saved into the database. If you forget to call the superclass method, the\ndefault behavior won’t happen and the database won’t get touched.\nIt’s also important that you pass through the arguments that can be\npassed to the model method – that’s what the\nbit does. Django\nwill, from time to time, extend the capabilities of built-in model methods,\nadding new keyword arguments. If you use\nin your method\ndefinitions, you are guaranteed that your code will automatically support those\narguments when they are added.\nIf you wish to update a field value in the\nmethod, you may\nalso want to have this field added to the\nupdate_fields\nkeyword argument.\nThis will ensure the field is saved when\nupdate_fields\nis specified. For\nSpecifying which fields to save\nfor more details.\nOverridden model methods are not called on bulk operations\nNote that the\nmethod for an object is not\nnecessarily called when\ndeleting objects in bulk using a\nor as a result of a\n. To ensure customized\ndelete logic gets executed, you can use\npost_delete\nUnfortunately, there isn’t a workaround when\nobjects in bulk,\nsince none of\nare called.\nExecuting custom SQL\nAnother common pattern is writing custom SQL statements in model methods and\nmodule-level methods. For more details on using raw SQL, see the documentation\nusing raw SQL\nModel inheritance\nModel inheritance in Django works almost identically to the way normal\nclass inheritance works in Python, but the basics at the beginning of the page\nshould still be followed. That means the base class should subclass\ndjango.db.models.Model\nThe only decision you have to make is whether you want the parent models to be\nmodels in their own right (with their own database tables), or if the parents\nare just holders of common information that will only be visible through the\nchild models.\nThere are three styles of inheritance that are possible in Django.\nOften, you will just want to use the parent class to hold information that\nyou don’t want to have to type out for each child model. This class isn’t\ngoing to ever be used in isolation, so\nAbstract base classes\nwhat you’re after.\nIf you’re subclassing an existing model (perhaps something from another\napplication entirely) and want each model to have its own database table,\nMulti-table inheritance\nis the way to go.\nFinally, if you only want to modify the Python-level behavior of a model,\nwithout changing the models fields in any way, you can use\nProxy models\nAbstract base classes\nAbstract base classes are useful when you want to put some common\ninformation into a number of other models. You write your base class\nabstract=True\nclass. This model will then not be used to create any database\ntable. Instead, when it is used as a base class for other models, its\nfields will be added to those of the child class.\nAn example:\nmodel will have three fields:\nmodel cannot be used as a normal Django\nmodel, since it is an abstract base class. It does not generate a database\ntable or have a manager, and cannot be instantiated or saved directly.\nFields inherited from abstract base classes can be overridden with another\nfield or value, or be removed with\nFor many uses, this type of model inheritance will be exactly what you want.\nIt provides a way to factor out common information at the Python level, while\nstill only creating one database table per child model at the database level.\ninheritance\nWhen an abstract base class is created, Django makes any\ninner class you declared in the base class available as an\nattribute. If a child class does not declare its own\nclass, it will inherit the parent’s\n. If the child wants to\nextend the parent’s\nclass, it can subclass it. For example:\nDjango does make one adjustment to the\nclass of an\nabstract base class: before installing the\nattribute, it sets\nabstract=False\n. This means that children of abstract\nbase classes don’t automatically become abstract classes themselves. To make\nan abstract base class that inherits from another abstract base class, you need\nto explicitly set\nabstract=True\non the child.\nSome attributes won’t make sense to include in the\nclass of an\nabstract base class. For example, including\nwould mean that all\nthe child classes (the ones that don’t specify their own\n) would use\nthe same database table, which is almost certainly not what you want.\nDue to the way Python inheritance works, if a child class inherits from\nmultiple abstract base classes, only the\nfrom the first listed class will be inherited by default. To inherit\noptions from multiple abstract base classes, you must\nexplicitly declare the\ninheritance. For example:\nBe careful with\nrelated_name\nrelated_query_name\nIf you are using\nrelated_name\nrelated_query_name\nManyToManyField\n, you must always specify a\nreverse name and query\nname for the field. This would normally cause a problem in abstract base\nclasses, since the fields on this class are included into each of the child\nclasses, with exactly the same values for the attributes (including\nrelated_name\nrelated_query_name\n) each time.\nTo work around this problem, when you are using\nrelated_name\nrelated_query_name\nin an abstract base\nclass (only), part of the value should contain\n'%(app_label)s'\n'%(class)s'\n'%(class)s'\nis replaced by the lowercased name of the child class that\nthe field is used in.\n'%(app_label)s'\nis replaced by the lowercased name of the app the child\nclass is contained within. Each installed application name must be unique and\nthe model class names within each app must also be unique, therefore the\nresulting name will end up being different.\nFor example, given an app\ncommon/models.py\nAlong with another app\nrare/models.py\ncommon.models\nThe reverse name of the\ncommon.ChildA.m2m\nfield will be\ncommon_childa_related\nand the reverse query name will be\ncommon_childas\nThe reverse name of the\ncommon.ChildB.m2m\nfield will be\ncommon_childb_related\nand the reverse query name will be\ncommon_childbs\n. Finally, the reverse name of the\nrare.ChildB.m2m\nrare_childb_related\nand the reverse query name will be\nrare_childbs\n. It’s up to you how you use the\n'%(class)s'\n'%(app_label)s'\nportion to construct your related name or related query name\nbut if you forget to use it, Django will raise errors when you perform system\nchecks (or run\nIf you don’t specify a\nrelated_name\nattribute for a field in an abstract base class, the default reverse name will\nbe the name of the child class followed by\n, just as it normally\nwould be if you’d declared the field directly on the child class. For example,\nin the above code, if the\nrelated_name\nattribute was omitted, the reverse name for the\nfield would be\nMulti-table inheritance\nThe second type of model inheritance supported by Django is when each model in\nthe hierarchy is a model all by itself. Each model corresponds to its own\ndatabase table and can be queried and created individually. The inheritance\nrelationship introduces links between the child model and each of its parents\n(via an automatically-created\nOneToOneField\nFor example:\nAll of the fields of\nwill also be available in\nalthough the data will reside in a different database table. So these are both\n\"Bob's Cafe\"\n\"Bob's Cafe\"\nIf you have a\nthat is also a\n, you can get from the\nobject to the\nobject by using the lowercase version of\nthe model name:\nHowever, if\nin the above example was\n(it had been\ncreated directly as a\nobject or was the parent of some other class),\nreferring to\np.restaurant\nwould raise a\nRestaurant.DoesNotExist\nThe automatically-created\nOneToOneField\nthat links it to\nlooks like this:\nYou can override that field by declaring your own\nOneToOneField\nparent_link=True\nand multi-table inheritance\nIn the multi-table inheritance situation, it doesn’t make sense for a child\nclass to inherit from its parent’s\nclass. All the\nhave already been applied to the parent class and applying them again would\nnormally only lead to contradictory behavior (this is in contrast with the\nabstract base class case, where the base class doesn’t exist in its own\nSo a child model does not have access to its parent’s\nclass. However, there are a few limited cases where the child\ninherits behavior from the parent: if the child does not specify an\nattribute or a\nget_latest_by\nattribute, it will inherit\nthese from its parent.\nIf the parent has an ordering and you don’t want the child to have any natural\nordering, you can explicitly disable it:\nInheritance and reverse relations\nBecause multi-table inheritance uses an implicit\nOneToOneField\nto link the child and\nthe parent, it’s possible to move from the parent down to the child,\nas in the above example. However, this uses up the name that is the\nrelated_name\nManyToManyField\nrelations.  If you\nare putting those types of relations on a subclass of the parent model, you\nspecify the\nrelated_name\nattribute on each such field. If you forget, Django will raise a validation\nFor example, using the above\nclass again, let’s create another\nsubclass with a\nManyToManyField\nManyToManyField\nThis results in the error:\nrelated_name\nfield as follows would resolve the\nmodels.ManyToManyField(Place,\nrelated_name='provider')\nSpecifying the parent link field\nAs mentioned, Django will automatically create a\nOneToOneField\nlinking your child\nclass back to any non-abstract parent models. If you want to control the\nname of the attribute linking back to the parent, you can create your\nOneToOneField\nparent_link=True\nto indicate that your field is the link back to the parent class.\nProxy models\nmulti-table inheritance\ndatabase table is created for each subclass of a model. This is usually the\ndesired behavior, since the subclass needs a place to store any additional\ndata fields that are not present on the base class. Sometimes, however, you\nonly want to change the Python behavior of a model – perhaps to change the\ndefault manager, or add a new method.\nThis is what proxy model inheritance is for: creating a\noriginal model. You can create, delete and update instances of the proxy model\nand all the data will be saved as if you were using the original (non-proxied)\nmodel. The difference is that you can change things like the default model\nordering or the default manager in the proxy, without having to alter the\nProxy models are declared like normal models. You tell Django that it’s a\nproxy model by setting the\nattribute of\nFor example, suppose you want to add a method to the\nmodel. You can do it like this:\nclass operates on the same database table as its parent\nclass. In particular, any new instances of\nwill also be\naccessible through\n, and vice-versa:\nYou could also use a proxy model to define a different default ordering on\na model. You might not always want to order the\nmodel, but regularly\norder by the\nattribute when you use the proxy:\nOrderedPerson\n\"last_name\"\nqueries will be unordered\nOrderedPerson\nqueries will be ordered by\nProxy models inherit\nin the same way as regular\ns still return the model that was requested\nThere is no way to have Django return, say, a\nobject whenever you\nobjects. A queryset for\nobjects will return\nthose types of objects. The whole point of proxy objects is that code relying\non the original\nwill use those and your own code can use the\nextensions you included (that no other code is relying on anyway). It is not\na way to replace the\n(or any other) model everywhere with something\nof your own creation.\nBase class restrictions\nA proxy model must inherit from exactly one non-abstract model class. You\ncan’t inherit from multiple non-abstract models as the proxy model doesn’t\nprovide any connection between the rows in the different database tables. A\nproxy model can inherit from any number of abstract model classes, providing\ndefine any model fields. A proxy model may also inherit from any\nnumber of proxy models that share a common non-abstract parent class.\nProxy model managers\nIf you don’t specify any model managers on a proxy model, it inherits the\nmanagers from its model parents. If you define a manager on the proxy model,\nit will become the default, although any managers defined on the parent\nclasses will still be available.\nContinuing our example from above, you could change the default manager used\nwhen you query the\nmodel like this:\nIf you wanted to add a new manager to the Proxy, without replacing the\nexisting default, you can use the techniques described in the\ndocumentation: create a base class\ncontaining the new managers and inherit that after the primary base class:\nYou probably won’t need to do this very often, but, when you do, it’s\nDifferences between proxy inheritance and unmanaged models\nProxy model inheritance might look fairly similar to creating an unmanaged\nmodel, using the\nattribute on a\nWith careful setting of\nMeta.db_table\nyou could create an unmanaged model that\nshadows an existing model and adds Python methods to it. However, that would be\nvery repetitive and fragile as you need to keep both copies synchronized if you\nmake any changes.\nOn the other hand, proxy models are intended to behave exactly like the model\nthey are proxying for. They are always in sync with the parent model since they\ndirectly inherit its fields and managers.\nThe general rules are:\nIf you are mirroring an existing model or database table and don’t want\nall the original database table columns, use\nMeta.managed=False\nThat option is normally useful for modeling database views and tables\nnot under the control of Django.\nIf you are wanting to change the Python-only behavior of a model, but\nkeep all the same fields as in the original, use\nMeta.proxy=True\nThis sets things up so that the proxy model is an exact copy of the\nstorage structure of the original model when data is saved.\nMultiple inheritance\nJust as with Python’s subclassing, it’s possible for a Django model to inherit\nfrom multiple parent models. Keep in mind that normal Python name resolution\nrules apply. The first base class that a particular name (e.g.\n) appears in will be the one that is used; for example, this\nmeans that if multiple parents contain a\nonly the first one is going to be used, and all others will be ignored.\nGenerally, you won’t need to inherit from multiple parents. The main use-case\nwhere this is useful is for “mix-in” classes: adding a particular extra\nfield or method to every class that inherits the mix-in. Try to keep your\ninheritance hierarchies as simple and straightforward as possible so that you\nwon’t have to struggle to work out where a particular piece of information is\ncoming from.\nNote that inheriting from multiple models that have a common\nkey field will raise an error. To properly use multiple inheritance, you can\nuse an explicit\nin the base models:\nOr use a common ancestor to hold the\nrequires using an explicit\nOneToOneField\nparent model to the common ancestor to avoid a clash between the fields that\nare automatically generated and inherited by the child:\nField name “hiding” is not permitted\nIn normal Python class inheritance, it is permissible for a child class to\noverride any attribute from the parent class. In Django, this isn’t usually\npermitted for model fields. If a non-abstract model base class has a field\n, you can’t create another model field or define\nan attribute called\nin any class that inherits from that base class.\nThis restriction doesn’t apply to model fields inherited from an abstract\nmodel. Such fields may be overridden with another field or value, or be removed\nModel managers are inherited from abstract base classes. Overriding an\ninherited field which is referenced by an inherited\nmay cause subtle bugs. See\nmanagers and model inheritance\nSome fields define extra attributes on the model, e.g. a\ndefines an extra attribute with\nappended to the field name, as well as\nrelated_name\nrelated_query_name\non the foreign model.\nThese extra attributes cannot be overridden unless the field that defines\nit is changed or removed so that it no longer defines the extra attribute.\nOverriding fields in a parent model leads to difficulties in areas such as\ninitializing new instances (specifying which field is being initialized in\nModel.__init__\n) and serialization. These are features which normal Python\nclass inheritance doesn’t have to deal with in quite the same way, so the\ndifference between Django model inheritance and Python class inheritance isn’t\nThis restriction only applies to attributes which are\ninstances. Normal Python attributes\ncan be overridden if you wish. It also only applies to the name of the\nattribute as Python sees it: if you are manually specifying the database\ncolumn name, you can have the same column name appearing in both a child and\nan ancestor model for multi-table inheritance (they are columns in two\ndifferent database tables).\nDjango will raise a\nif you override\nany model field in any ancestor model.\nNote that because of the way fields are resolved during class definition, model\nfields inherited from multiple abstract parent models are resolved in a strict\ndepth-first order. This contrasts with standard Python MRO, which is resolved\nbreadth-first in cases of diamond shaped inheritance. This difference only\naffects complex model hierarchies, which (as per the advice above) you should\ntry to avoid.\nOrganizing models in a package\ncommand creates an application\nstructure that includes a\nfile. If you have many models,\norganizing them in separate files may be useful.\nTo do so, create a\npackage. Remove\nand create a\nmyapp/models/\ndirectory with an\n__init__.py\nfile and the files to\nstore your models. You must import the models in the\n__init__.py\nFor example, if you had\nsynthetic.py\nmyapp/models/__init__.py\nExplicitly importing each model rather than using\nhas the advantages of not cluttering the namespace, making code more readable,\nand keeping code analysis tools useful.\nThe Models Reference\nCovers all the model related APIs including model fields, related\nobjects, and",
  "word_count": 5937,
  "key_terms": [
    "return",
    "class",
    "method",
    "import",
    "database",
    "object",
    "interface"
  ]
}