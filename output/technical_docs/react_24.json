{
  "metadata": {
    "title": "Quick Start",
    "url": "https://react.dev/learn",
    "technology": "react",
    "category": "frameworks",
    "english_level": "B1",
    "professional_context": "development",
    "content_type": "technical_documentation",
    "last_updated": "1761765733.3683612"
  },
  "content": "Learn React\nQuick Start\nWelcome to the React documentation! This page will give you an introduction to 80% of the React concepts that you will use on a daily basis.\nYou will learn\nHow to create and nest components\nHow to add markup and styles\nHow to display data\nHow to render conditions and lists\nHow to respond to events and update the screen\nHow to share data between components\nCreating and nesting components\nReact apps are made out of\n. A component is a piece of the UI (user interface) that has its own logic and appearance. A component can be as small as a button, or as large as an entire page.\nReact components are JavaScript functions that return markup:\nI'm a button\nNow that you’ve declared\n, you can nest it into another component:\nNotice that\n<MyButton />\nstarts with a capital letter. That’s how you know it’s a React component. React component names must always start with a capital letter, while HTML tags must be lowercase.\nHave a look at the result:\nexport default\nkeywords specify the main component in the file. If you’re not familiar with some piece of JavaScript syntax,\njavascript.info\nhave great references.\nWriting markup with JSX\nThe markup syntax you’ve seen above is called\n. It is optional, but most React projects use JSX for its convenience. All of the\ntools we recommend for local development\nsupport JSX out of the box.\nJSX is stricter than HTML. You have to close tags like\n. Your component also can’t return multiple JSX tags. You have to wrap them into a shared parent, like a\n<div>...</div>\nor an empty\nIf you have a lot of HTML to port to JSX, you can use an\nonline converter.\nAdding styles\nIn React, you specify a CSS class with\n. It works the same way as the HTML\nThen you write the CSS rules for it in a separate CSS file:\n/* In your CSS */\nborder-radius\nReact does not prescribe how you add CSS files. In the simplest case, you’ll add a\ntag to your HTML. If you use a build tool or a framework, consult its documentation to learn how to add a CSS file to your project.\nDisplaying data\nJSX lets you put markup into JavaScript. Curly braces let you “escape back” into JavaScript so that you can embed some variable from your code and display it to the user. For example, this will display\nYou can also “escape into JavaScript” from JSX attributes, but you have to use curly braces\nquotes. For example,\nclassName=\"avatar\"\nstring as the CSS class, but\nsrc={user.imageUrl}\nreads the JavaScript\nuser.imageUrl\nvariable value, and then passes that value as the\nYou can put more complex expressions inside the JSX curly braces too, for example,\nstring concatenation\nIn the above example,\nis not a special syntax, but a regular\nobject inside the\nJSX curly braces. You can use the\nattribute when your styles depend on JavaScript variables.\nConditional rendering\nIn React, there is no special syntax for writing conditions. Instead, you’ll use the same techniques as you use when writing regular JavaScript code. For example, you can use an\nstatement to conditionally include JSX:\nIf you prefer more compact code, you can use the\nconditional\n, it works inside JSX:\nWhen you don’t need the\nbranch, you can also use a shorter\nAll of these approaches also work for conditionally specifying attributes. If you’re unfamiliar with some of this JavaScript syntax, you can start by always using\nRendering lists\nYou will rely on JavaScript features like\nto render lists of components.\nFor example, let’s say you have an array of products:\nInside your component, use the\nfunction to transform an array of products into an array of\nattribute. For each item in a list, you should pass a string or a number that uniquely identifies that item among its siblings. Usually, a key should be coming from your data, such as a database ID. React uses your keys to know what happened if you later insert, delete, or reorder the items.\nResponding to events\nYou can respond to events by declaring\nevent handler\nfunctions inside your components:\nonClick={handleClick}\nhas no parentheses at the end! Do not\nthe event handler function: you only need to\npass it down\n. React will call your event handler when the user clicks the button.\nUpdating the screen\nOften, you’ll want your component to “remember” some information and display it. For example, maybe you want to count the number of times a button is clicked. To do this, add\nto your component.\nFirst, import\nfrom React:\nNow you can declare a\nstate variable\ninside your component:\nYou’ll get two things from\n: the current state (\n), and the function that lets you update it (\n). You can give them any names, but the convention is to write\n[something, setSomething]\nThe first time the button is displayed,\nbecause you passed\n. When you want to change state, call\nand pass the new value to it. Clicking this button will increment the counter:\nReact will call your component function again. This time,\n. Then it will be\n. And so on.\nIf you render the same component multiple times, each will get its own state. Click each button separately:\nNotice how each button “remembers” its own\nstate and doesn’t affect other buttons.\nUsing Hooks\nFunctions starting with\nis a built-in Hook provided by React. You can find other built-in Hooks in the\nAPI reference.\nYou can also write your own Hooks by combining the existing ones.\nHooks are more restrictive than other functions. You can only call Hooks\nof your components (or other Hooks). If you want to use\nin a condition or a loop, extract a new component and put it there.\nSharing data between components\nIn the previous example, each\nhad its own independent\n, and when each button was clicked, only the\nfor the button clicked changed:\nInitially, each\nupdates its\nHowever, often you’ll need components to\nshare data and always update together\nTo make both\ncomponents display the same\nand update together, you need to move the state from the individual buttons “upwards” to the closest component containing all of them.\nIn this example, it is\nand is passed down to both children\nupdates its\nand passes it down to both children\nNow when you click either button, the\nwill change, which will change both of the counts in\n. Here’s how you can express this in code.\nmove the state up\npass the state down\n, together with the shared click handler. You can pass information to\nusing the JSX curly braces, just like you previously did with built-in tags like\nThe information you pass down like this is called\ncomponent contains the\nstate and the\nhandleClick\nevent handler, and\npasses both of them down as props\nto each of the buttons.\nFinally, change\nthe props you have passed from its parent component:\nWhen you click the button, the\nhandler fires. Each button’s\nprop was set to the\nhandleClick\nfunction inside\n, so the code inside of it runs. That code calls\nsetCount(count + 1)\n, incrementing the\nstate variable. The new\nvalue is passed as a prop to each button, so they all show the new value. This is called “lifting state up”. By moving state up, you’ve shared it between components.\nBy now, you know the basics of how to write React code!\nCheck out the\nto put them into practice and build your first mini-app with React.\nTutorial: Tic-Tac-Toe",
  "word_count": 1262,
  "key_terms": [
    "return",
    "class",
    "function",
    "import",
    "variable",
    "export",
    "database",
    "object",
    "api"
  ]
}