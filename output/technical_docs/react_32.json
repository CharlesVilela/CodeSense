{
  "metadata": {
    "title": "Add React to an Existing Project",
    "url": "https://react.dev/learn/add-react-to-an-existing-project",
    "technology": "react",
    "category": "frameworks",
    "english_level": "B1",
    "professional_context": "deployment",
    "content_type": "technical_documentation",
    "last_updated": "1761765746.5945008"
  },
  "content": "Learn React\nInstallation\nAdd React to an Existing Project\nIf you want to add some interactivity to your existing project, you don’t have to rewrite it in React. Add React to your existing stack, and render interactive React components anywhere.\nYou need to install\nfor local development.\nAlthough you can\nonline or with a simple HTML page, realistically most JavaScript tooling you’ll want to use for development requires Node.js.\nUsing React for an entire subroute of your existing website\nLet’s say you have an existing web app at\nexample.com\nbuilt with another server technology (like Rails), and you want to implement all routes starting with\nexample.com/some-app/\nfully with React.\nHere’s how we recommend to set it up:\nBuild the React part of your app\nusing one of the\nReact-based frameworks\nin your framework’s configuration (here’s how:\nConfigure your server or a proxy\nso that all requests under\nare handled by your React app.\nThis ensures the React part of your app can\nbenefit from the best practices\nbaked into those frameworks.\nMany React-based frameworks are full-stack and let your React app take advantage of the server. However, you can use the same approach even if you can’t or don’t want to run JavaScript on the server. In that case, serve the HTML/CSS/JS export (\nnext export\nfor Next.js, default for Gatsby) at\nUsing React for a part of your existing page\nLet’s say you have an existing page built with another technology (either a server one like Rails, or a client one like Backbone), and you want to render interactive React components somewhere on that page. That’s a common way to integrate React—in fact, it’s how most React usage looked at Meta for many years!\nYou can do this in two steps:\nSet up a JavaScript environment\nthat lets you use the\n, split your code into modules with the\nsyntax, and use packages (for example, React) from the\npackage registry.\nRender your React components\nwhere you want to see them on the page.\nThe exact approach depends on your existing page setup, so let’s walk through some details.\nStep 1: Set up a modular JavaScript environment\nA modular JavaScript environment lets you write your React components in individual files, as opposed to writing all of your code in a single file. It also lets you use all the wonderful packages published by other developers on the\nregistry—including React itself! How you do this depends on your existing setup:\nIf your app is already split into files that use\nstatements,\ntry to use the setup you already have. Check whether writing\nin your JS code causes a syntax error. If it causes a syntax error, you might need to\ntransform your JavaScript code with Babel\n, and enable the\nBabel React preset\nto use JSX.\nIf your app doesn’t have an existing setup for compiling JavaScript modules,\nset it up with\n. The Vite community maintains\nmany integrations with backend frameworks\n, including Rails, Django, and Laravel. If your backend framework is not listed,\nfollow this guide\nto manually integrate Vite builds with your backend.\nTo check whether your setup works, run this command in your project folder:\nnpm install react react-dom\nThen add these lines of code at the top of your main JavaScript file (it might be called\nIf the entire content of your page was replaced by a “Hello, world!”, everything worked! Keep reading.\nIntegrating a modular JavaScript environment into an existing project for the first time can feel intimidating, but it’s worth it! If you get stuck, try our\ncommunity resources\nStep 2: Render React components anywhere on the page\nIn the previous step, you put this code at the top of your main file:\nOf course, you don’t actually want to clear the existing HTML content!\nDelete this code.\nInstead, you probably want to render your React components in specific places in your HTML. Open your HTML page (or the server templates that generate it) and add a unique\nattribute to any tag, for example:\n<!-- ... somewhere in your html ... -->\n\"navigation\"\n<!-- ... more html ... -->\nThis lets you find that HTML element with\ndocument.getElementById\nand pass it to\nso that you can render your own React component inside:\nNotice how the original HTML content from\nis preserved, but your own\nNavigationBar\nReact component now appears inside the\n<nav id=\"navigation\">\nfrom your HTML. Read the\nusage documentation\nto learn more about rendering React components inside an existing HTML page.\nWhen you adopt React in an existing project, it’s common to start with small interactive components (like buttons), and then gradually keep “moving upwards” until eventually your entire page is built with React. If you ever reach that point, we recommend migrating to\na React framework\nright after to get the most out of React.\nUsing React Native in an existing native mobile app\nReact Native\ncan also be integrated into existing native apps incrementally. If you have an existing native app for Android (Java or Kotlin) or iOS (Objective-C or Swift),\nfollow this guide\nto add a React Native screen to it.\nBuild a React App from Scratch",
  "word_count": 857,
  "key_terms": [
    "export",
    "framework",
    "configuration"
  ]
}