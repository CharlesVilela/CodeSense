{
  "metadata": {
    "title": "Control flow and error handling",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling",
    "technology": "javascript",
    "category": "programming_languages",
    "english_level": "B1",
    "professional_context": "development",
    "content_type": "technical_documentation",
    "last_updated": "1761765691.2950103"
  },
  "content": "Control flow and error handling\nJavaScript supports a compact set of statements, specifically\ncontrol flow statements, that you can use to incorporate a great deal of interactivity\nin your application. This chapter provides an overview of these statements.\nJavaScript reference\ncontains exhaustive details about the statements in this chapter. The semicolon\n) character is used to separate statements in JavaScript code.\nAny JavaScript expression is also a statement.\nExpressions and operators\nfor complete information about expressions.\nBlock statement\nThe most basic statement is a\nblock statement\n, which is used to group\nstatements. The block is delimited by a pair of curly braces:\nstatement1;\nstatement2;\nstatementN;\nBlock statements are commonly used with control flow statements (\nwhile (x < 10) {\nis the block statement.\n-declared variables are not block-scoped, but are scoped to the containing function or script, and the effects of setting them persist beyond the block itself. For example:\nconsole.log(x); // 2\nThis outputs\nbecause the\nstatement within the block is in the same scope as the\nstatement before the block. (In C or Java, the equivalent code would have output\nThis scoping effect can be mitigated by using\nConditional statements\nA conditional statement is a set of commands that executes if a specified condition is\ntrue. JavaScript supports two conditional statements:\nif...else statement\nstatement to execute a statement if a logical condition is\n. Use the optional\nclause to execute a statement if\nthe condition is\nstatement looks like this:\nif (condition) {\nstatement1;\nstatement2;\ncan be any expression that evaluates to\nfor an explanation of what evaluates to\nevaluates to\nis executed. Otherwise,\nis executed.\ncan be any statement, including further nested\nstatements.\nYou can also compound the statements using\nto have multiple\nconditions tested in sequence, as follows:\nIn the case of multiple conditions, only the first logical condition which evaluates to\nwill be executed. To execute multiple statements, group them within a\nblock statement (\n{ /* … */ }\nBest practice\nIn general, it's good practice to always use block statements—\nstatements:\nIn general it's good practice to not have an\nwith an assignment like\nas a condition:\nif (x = y) {\nHowever, in the rare case you find yourself wanting to do something like that, the\ndocumentation has a\nUsing an assignment as a condition\nsection with guidance on a general best-practice syntax you should know about and follow.\nFalsy values\nThe following values evaluate to\n(also known as\nthe empty string (\nAll other values—including all objects—evaluate to\nwhen passed to a\nconditional statement.\nDo not confuse the primitive boolean values\nwith the true and false values of the\nFor example:\nIn the following example, the function\nif the number of characters in a\nobject is three. Otherwise, it\ndisplays an alert and returns\nswitch statement\nstatement allows a program to evaluate an expression and attempt\nto match the expression's value to a\nlabel. If a match is found, the\nprogram executes the associated statement.\nstatement looks like this:\nJavaScript evaluates the above switch statement as follows:\nThe program first looks for a\nclause with a label matching the\nvalue of expression and then transfers control to that clause, executing the\nassociated statements.\nIf no matching label is found, the program looks for the optional\nclause is found, the program transfers control to that\nclause, executing the associated statements.\nclause is found, the program resumes execution at the\nstatement following the end of\n(By convention, the\nclause is written as the last clause,\nbut it does not need to be so.)\nbreak statements\nThe optional\nstatement associated with each\nensures that the program breaks out of\nonce the matched statement is\nexecuted, and then continues execution at the statement following\nis omitted, the program continues execution inside the\nstatement (and will execute statements under the next\n, and so on).\nIn the following example, if\nevaluates to\n, the program matches the value with\ncase \"Bananas\"\nand executes the associated statement. When\nis encountered, the\nprogram exits the\nand continues execution from the statement\nwere omitted, the statement for\ncase \"Cherries\"\nwould also be executed.\nException handling statements\nYou can throw exceptions using the\nstatement and handle them using\ntry...catch\nstatements.\ntry...catch\nException types\nJust about any object can be thrown in JavaScript. Nevertheless, not all thrown objects\nare created equal. While it is common to throw numbers or strings as errors, it is\nfrequently more effective to use one of the exception types specifically created for\nthis purpose:\nECMAScript exceptions\nDOMException\nthrow statement\nstatement to throw an exception. A\nstatement specifies the value to be thrown:\nthrow expression;\nYou may throw any expression, not just expressions of a specific type. The following\ncode throws several exceptions of varying types:\ntry...catch statement\ntry...catch\nstatement marks a block of statements to try, and\nspecifies one or more responses should an exception be thrown. If an exception is\nthrown, the\ntry...catch\nstatement catches it.\ntry...catch\nstatement consists of a\nblock, which\ncontains one or more statements, and a\nblock, containing statements\nthat specify what to do if an exception is thrown in the\nIn other words, you want the\nblock to succeed—but if it does not, you\nwant control to pass to the\nblock. If any statement within the\nblock (or in a function called from within the\nthrows an exception, control\nimmediately\nshifts to the\nblock. If no exception is thrown in the\nblock is skipped. The\nblock executes after the\nblocks execute but before the statements following the\ntry...catch\nThe following example uses a\ntry...catch\nstatement. The example calls a\nfunction that retrieves a month name from an array based on the value passed to the\nfunction. If the value does not correspond to a month number\n), an exception is thrown with the value\n'Invalid month code'\nand the statements in the\nblock set the\nvariable to\nThe catch block\nYou can use a\nblock to handle all exceptions that may be generated\ncatch (exception) {\nblock specifies an identifier (\nin the preceding syntax) that holds the value specified by the\nstatement. You can use this identifier to get information about the exception that was\nJavaScript creates this identifier when the\nblock is entered. The\nidentifier lasts only for the duration of the\nblock. Once the\nblock finishes executing, the identifier no longer exists.\nFor example, the following code throws an exception. When the exception occurs, control\ntransfers to the\nWhen logging errors to the console inside\nblock, using\nconsole.error()\nrather than\nconsole.log()\nis advised for debugging. It formats the message as an\nerror, and adds it to the list of error messages generated by the page.\nThe finally block\nblock contains statements to be executed\nblocks execute. Additionally, the\nblock executes\nthe code that follows the\ntry...catch...finally\nIt is also important to note that the\nblock will execute\nwhether or not\nan exception is thrown. If an exception is thrown, however, the\nstatements in the\nblock execute even if no\nhandles the exception that was thrown.\nYou can use the\nblock to make your script fail gracefully when an\nexception occurs. For example, you may need to release a resource that your script has\nThe following example opens a file and then executes statements that use the file.\n(Server-side JavaScript allows you to access files.) If an exception is thrown while the\nfile is open, the\nblock closes the file before the script fails.\nthat the file is never left open, even\nif an error occurs.\nblock returns a value, this value becomes the return value\nof the entire\ntry...catch...finally\nproduction, regardless of any\nstatements in the\nOverwriting of return values by the\nblock also applies to\nexceptions thrown or re-thrown inside of the\nNesting try...catch statements\nYou can nest one or more\ntry...catch\nstatements.\nIf an inner\nhave a corresponding\nthe enclosing\ntry...catch\nstatement's\nchecked for a match.\nFor more information, see\nnested try-blocks\ntry...catch\nreference page.\nUtilizing Error objects\nDepending on the type of error, you may be able to use the\nproperties to get a more refined message.\nproperty provides the general class of\nDOMException\ngenerally provides a more succinct message than one would get by converting the error\nobject to a string.\nIf you are throwing your own exceptions, in order to take advantage of these properties\n(such as if your\nblock doesn't discriminate between your own\nexceptions and system ones), you can use the\nconstructor.\nFor example:\nHelp improve MDN\nLearn how to contribute\nThis page was last modified on\n⁨Sep 19, 2025⁩\nMDN contributors\nView this page on GitHub\nReport a problem with this content",
  "word_count": 1435,
  "key_terms": [
    "return",
    "class",
    "function",
    "variable",
    "object"
  ]
}