{
  "metadata": {
    "title": "What is AWS Lambda?",
    "url": "https://docs.aws.amazon.com/lambda/latest/dg/welcome.html",
    "technology": "aws",
    "category": "devops_cloud",
    "english_level": "B1",
    "professional_context": "deployment",
    "content_type": "technical_documentation",
    "last_updated": "1761765825.5429506"
  },
  "content": "What is AWS Lambda?\nAWS Lambda is a compute service that runs code without the need to manage servers. Your code runs, scaling up and down automatically, with pay-per-use pricing.\nTo get started, see\nCreate your first function\nYou can use Lambda for:\nStream processing\n: Process real-time data streams for analytics and monitoring. See\nKinesis Data Streams\nfor details.\nWeb applications\n: Build scalable web apps that automatically adjust to demand.\nMobile backends\n: Create secure API backends for mobile and web applications.\nIoT backends\n: Handle web, mobile, IoT, and third-party API requests. See\nfor details.\nFile processing\n: Process files automatically when uploaded to Amazon Simple Storage Service. See\nfile processing examples\nfor details.\nDatabase operations and integration examples\n: Respond to database changes and automate data workflows. See\ndatabase examples\nfor details.\nScheduled and periodic tasks\n: Run automated operations on a regular schedule using EventBridge. See\nscheduled task examples\nfor details.\nFor pricing information, see\nAWS Lambda Pricing\nHow Lambda works\nWhen using Lambda, you are responsible only for your code. Lambda runs your code on a high-availability compute infrastructure and manages all the computing resources,\nincluding server and operating system maintenance, capacity provisioning, automatic scaling, and logging.\nBecause Lambda is a serverless,\nevent-driven compute service, it uses a different programming paradigm than traditional web applications. The following model illustrates how Lambda works:\nYou write and organize your code in\nLambda functions\n, which are the basic building blocks you use to create a Lambda application.\nYou control security and access through\nLambda permissions\nexecution roles\nto manage what AWS services your functions can interact with and what resource policies can interact with your code.\nEvent sources and AWS services\nyour Lambda functions, passing event data in JSON format, which your functions process (this includes event source mappings).\nLambda runs your code\nwith language-specific runtimes (like Node.js and Python) in execution environments that package your runtime, layers, and extensions.\nTo learn how to build\nserverless solutions\n, check out the\nServerless Developer Guide\nKey features\nConfigure, control, and deploy secure applications:\nEnvironment variables\nmodify application behavior without new code deployments.\nsafely test new features while maintaining stable production environments.\nLambda layers\noptimize code reuse and maintenance by sharing common components across multiple functions.\nCode signing\nenforce security compliance by ensuring only approved code reaches production systems.\nScale and perform reliably:\nConcurrency and scaling controls\nprecisely manage application responsiveness and resource utilization during traffic spikes.\nLambda SnapStart\nsignificantly reduce cold start times. Lambda SnapStart can provide as low as sub-second startup performance, typically with no changes to your function code.\nResponse streaming\noptimize function performance by delivering large payloads incrementally for real-time processing.\nContainer images\npackage functions with complex dependencies using container workflows.\nConnect and integrate seamlessly:\nVPC networks\nsecure sensitive resources and internal services.\nFile system\nintegration that shares persistent data and manage stateful operations across function invocations.\nFunction URLs\ncreate public-facing APIs and endpoints without additional services.\nLambda extensions\naugment functions with monitoring, security, and operational tools.\nRelated information\nFor information on how Lambda works, see\nHow Lambda works\nTo start using Lambda, see\nCreate your first Lambda function\nFor a list of example applications, see\nGetting started with example applications and patterns",
  "word_count": 539,
  "key_terms": [
    "database",
    "api",
    "function"
  ]
}