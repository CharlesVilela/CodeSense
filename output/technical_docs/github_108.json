{
  "metadata": {
    "title": "Creating a commit with multiple authors",
    "url": "https://docs.github.com/en/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/creating-a-commit-with-multiple-authors",
    "technology": "github",
    "category": "tools_platforms",
    "english_level": "B1",
    "professional_context": "deployment",
    "content_type": "technical_documentation",
    "last_updated": "1761766069.4718828"
  },
  "content": "Creating a commit with multiple authors\nYou can attribute a commit to more than one author by adding one or more\nCo-authored-by\ntrailers to the commit's message. Co-authored commits are visible on GitHub.\nIn this article\nRequired co-author information\nBefore you can add a co-author to a commit, you must know the appropriate email to use for each co-author. For the co-author's commit to count as a contribution, you must use the email associated with their account on GitHub.com.\nIf a person chooses to keep their email address private, you should use their GitHub-provided\nemail to protect their privacy. Otherwise, the co-author's email will be available to the public in the commit message. If you want to keep your email private, you can choose to use a GitHub-provided\nemail for Git operations and ask other co-authors to list your\nemail in commit trailers.\nFor more information, see\nSetting your commit email address\nYou can help a co-author find their preferred email address by sharing this information:\nTo find your GitHub-provided\nemail, navigate to your email settings page under \"Keep my email address private.\"\nTo find the email you used to configure Git on your computer, run\ngit config user.email\non the command line.\nCreating co-authored commits using GitHub Desktop\nYou can use GitHub Desktop to create a commit with a co-author. For more information, see\nCommitting and reviewing changes to your project in GitHub Desktop\nGitHub Desktop\nCreating co-authored commits on the command line\nCollect the name and email address for each co-author. If a person chooses to keep their email address private, you should use their GitHub-provided\nemail to protect their privacy.\nType your commit message and a short, meaningful description of your changes. After your commit description, instead of a closing quotation, add an empty line.\ngit commit -m\n\"Refactor usability tests.\nIf you're using a text editor on the command line to type your commit message, ensure there is a blank line (two consecutive newlines) between the end of your commit description and the\nCo-authored-by:\ncommit trailer.\nOn the next line of the commit message, type\nCo-authored-by: name <name@example.com>\nwith specific information for each co-author. After the co-author information, add a closing quotation mark.\nIf you're adding multiple co-authors, give each co-author their own line and\nCo-authored-by:\ncommit trailer. Do not add blank lines between each co-author line.\nThe new commit and message will appear on GitHub.com the next time you push. For more information, see\nPushing commits to a remote repository\nCreating co-authored commits on GitHub\nAfter you've made changes in a file using the web editor on GitHub, you can create a co-authored commit by adding a\nCo-authored-by:\ntrailer to the commit's message.\nCollect the name and email address for each co-author. If a person chooses to keep their email address private, you should use their GitHub-provided\nemail to protect their privacy.\nCommit changes...\nIn the \"Commit message\" field, type a short, meaningful commit message that describes the changes you made.\nIn the text box below your commit message, add\nCo-authored-by: name <name@example.com>\nwith specific information for each co-author. If you're adding multiple co-authors, give each co-author their own line and\nCo-authored-by:\ncommit trailer.\nCommit changes\nPropose changes\nThe new commit and message will appear on GitHub.com.\nFurther reading\nViewing a project's contributors\nChanging a commit message\nCommitting and reviewing changes to your project in GitHub Desktop\nin the GitHub Desktop documentation",
  "word_count": 567,
  "key_terms": []
}